/*#
 * Copyright (C) 2023 Geon Technologies, LLC
 *
 * This file is part of vrtgen.
 *
 * vrtgen is free software: you can redistribute it and/or modify it under the
 * terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation, either version 3 of the License, or (at your option)
 * any later version.
 *
 * vrtgen is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for
 * more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see http://www.gnu.org/licenses/.
#*/
{%- macro handle_data_callback(packet) %}
virtual void send_{{ packet.name | to_snake }}({{packet.name}}& packet) = 0;
{% endmacro %}

{%- macro define_cif_query(packet, cif) %}
{% for field in cif.fields if field.enabled and not field.indicator_only %}
{%   if field.is_optional %}
{%     if packet.config.is_control_s %}
if (packet.{{ field.name }}_enabled()) {
{%     else %}
if (packet.has_{{ field.name }}()) {
{%     endif %}
    ack.{{ field.setter }}(this->{{ field.getter }}());
}
{%   else %}
ack.{{ field.setter }}(this->{{ field.getter }}());
{%   endif %}
{% endfor %}
{% endmacro %}

{%- macro handle_query(packet) %}
if ({{ packet.name }}::helper::match(m_message.data(), recv_length)) {
    {{ packet.name }} packet;
    {{ packet.name }}::helper::unpack(packet, m_message.data(), recv_length);
    {{ packet.name }}Ack ack;
{% if packet.cif0.enabled %}
    {{ define_cif_query(packet, packet.cif0) | indent(4) | trim }}
{% endif %}
{% if packet.cif1.enabled %}
    {{ define_cif_query(packet, packet.cif1) | indent(4) | trim }}
{% endif %}
{% if packet.cif2.enabled %}
    {{ define_cif_query(packet, packet.cif2) | indent(4) | trim }}
{% endif %}
    ack.{{ packet.stream_id.setter }}(packet.{{ packet.stream_id.getter }}());
    ack.{{ packet.message_id.setter }}(packet.{{ packet.message_id.setter }}());
    auto packed_data = {{ packet.name }}Ack::helper::pack(ack);
    m_socket.send_to(packed_data.data(), packed_data.size(), endpoint);
}
{% endmacro %}

{%- macro define_cif_configure(packet, cif, wif, eif) %}
{% for field in cif.fields if field.enabled and not field.indicator_only %}
{%   if field.is_optional %}
if (packet.has_{{ field.name }}()) {
{%     if packet.config.warnings_enabled and packet.config.errors_enabled %}
    auto {{ field.name }}_warn_err = this->{{ field.setter }}(packet.{{ field.getter }}());
    auto {{ field.name }}_warnings = std::get<0>({{ field.name }}_warn_err);
    if ({{ field.name }}_warnings.has_value()) {
        ack.{{ field.name }}_warnings({{ field.name }}_warnings.value());
    }
    auto {{ field.name }}_errors = std::get<1>({{ field.name }}_warn_err);
    if ({{ field.name }}_errors.has_value()) {
        ack.{{ field.name }}_errors({{ field.name }}_errors.value());
    }
{%     elif packet.config.warnings_enabled %}
    auto {{ field.name }}_warnings = this->{{ field.setter }}(packet.{{ field.getter }}());
    if ({{ field.name }}_warnings.has_value()) {
        ack.{{ field.name }}_warnings({{ field.name }}_warnings.value());
    }
{%     elif packet.config.errors_enabled %}
    auto {{ field.name }}_errors = this->{{ field.setter }}(packet.{{ field.getter }}());
    if ({{ field.name }}_errors.has_value()) {
        ack.{{ field.name }}_errors({{ field.name }}_errors.value());
    }
{%     else %}
    this->{{ field.setter }}(packet.{{ field.getter }}());
{%     endif %}
}
{%   else %}
{%     if packet.config.warnings_enabled and packet.config.errors_enabled %}
auto {{ field.name }}_warn_err = this->{{ field.setter }}(packet.{{ field.getter }}());
auto {{ field.name }}_warnings = std::get<0>({{ field.name }}_warn_err);
if ({{ field.name }}_warnings.has_value()) {
    ack.{{ field.name }}_warnings({{ field.name }}_warnings.value());
}
auto {{ field.name }}_errors = std::move(std::get<1>({{ field.name }}_warn_err));
if ({{ field.name }}_errors.has_value()) {
    ack.{{ field.name }}_errors({{ field.name }}_errors.value());
}
{%     elif packet.config.warnings_enabled %}
auto {{ field.name }}_warnings = this->{{ field.setter }}(packet.{{ field.getter }}());
if ({{ field.name }}_warnings.has_value()) {
    ack.{{ field.name }}_warnings({{ field.name }}_warnings.value());
}
{%     elif packet.config.errors_enabled %}
auto {{ field.name }}_errors = this->{{ field.setter }}(packet.{{ field.getter }}());
if ({{ field.name }}_errors.has_value()) {
    ack.{{ field.name }}_errors({{ field.name }}_errors.value());
}
{%     else %}
this->{{ field.setter }}(packet.{{ field.getter }}());
{%     endif %}
{%   endif %}
{% endfor %}
{% endmacro %}

{%- macro handle_configure(packet) %}
if ({{ packet.name }}::helper::match(m_message.data(), recv_length)) {
    {{ packet.name }} packet;
    {{ packet.name }}::helper::unpack(packet, m_message.data(), recv_length);
    {{ packet.name }}Ack ack;
{% if packet.cif0.enabled %}
    {{ define_cif_configure(packet, packet.cif0, packet.wif0, packet.eif0) | indent(4) | trim }}
{% endif %}
{% if packet.cif1.enabled %}
    {{ define_cif_configure(packet, packet.cif1) | indent(4) | trim }}
{% endif %}
{% if packet.cif2.enabled %}
    {{ define_cif_configure(packet, packet.cif2) | indent(4) | trim }}
{% endif %}
    ack.{{ packet.stream_id.setter }}(packet.{{ packet.stream_id.getter }}());
    ack.{{ packet.message_id.setter }}(packet.{{ packet.message_id.setter }}());
    auto packed_data = {{ packet.name }}Ack::helper::pack(ack);
    m_socket.send_to(packed_data.data(), packed_data.size(), endpoint);
}
{% endmacro %}

{%- macro handle_data(packet) %}
if ({{ packet.name }}::helper::match(m_message.data(), recv_length)) {
    {{ packet.name }} packet;
    {{ packet.name }}::helper::unpack(packet, m_message.data(), recv_length);
}
{% endmacro %}

{%- macro define_controllee_base(class_name) %}
#pragma once

#include <array>
#include <thread>
#include <atomic>
#include <map>
#include <memory>
#include <optional>
#include <tuple>
#include <vrtgen/vrtgen.hpp>
{% if cmd_socket == 'nats' %}
#include <chrono>
#include <vrtgen/nats.hpp>
{% else %}
#include <vrtgen/socket.hpp>
{% endif %}

{% for packet in packets if packet.is_command %}
#include <{{ packet.name | to_snake }}.hpp>
{% endfor %}
{% if namespace_ %}

namespace {{ namespace_ }}::controllee {

using namespace {{ namespace_ }}::packets;
{% endif %}

/**
 * @class {{ class_name }}
 */
class {{ class_name }}
{
{% set ns = namespace(has_datactxt=false,has_control=false) %}
{% for packet in packets %}
{%   if packet.is_data or packet.is_context %}
{%     set ns.has_datactxt = true %}
{%   endif %}
{%   if packet.is_control %}
{%     set ns.has_control = true %}
{%   endif %}
{% endfor %}
{% if ns.has_control and cmd_socket != 'nats' %}
    using cmd_socket_type = vrtgen::socket::{{ cmd_socket }}::v4;
    using message_buffer = std::array<uint8_t, 65536>;
{% endif %}
{% if ns.has_datactxt %}
    using data_ctxt_socket_type = vrtgen::socket::udp::v4;
    using data_ctxt_endpoint_type = typename data_ctxt_socket_type::endpoint_type;
{% endif %}
{% if ns.has_control and cmd_socket != 'nats' %}
protected:
    using cmd_endpoint_type = typename cmd_socket_type::endpoint_type;
{% endif %}

public:
{% if ns.has_control %}
{%   if cmd_socket != 'nats' %}
    /**
     * @brief Endpoint constructor
     * @param endpoint Desired endpoint to bind command socket to
     */
    explicit {{ class_name }}(const cmd_endpoint_type& endpoint)
    {
        if (!m_cmd_socket.bind(endpoint)) {
            throw std::runtime_error("Failed to bind socket during Controllee construction");
        }
    }
{%   else %}
    /**
     * @brief Endpoint constructor
     * @param nats_url NATS server url to connect to
     * @param subject NATS subject to be used for command messages
     */
    {{ class_name }}(const std::string& nats_url, const std::string& subject)
    {
        if (auto res = m_client.connect(nats_url); res != NATS_OK) {
            throw std::runtime_error("Failed to connect to NATS url during Controllee construction");
        }
        if (auto res = m_client.subscribe(subject); res != NATS_OK) {
            throw std::runtime_error("Failed to subscribe to NATS subject during Controllee construction");
        }
    }
{%   endif %}
{% else %}
    /**
     * @brief Default constructor
     */
    {{ class_name }}() = default;
{% endif %}

    /**
     * @brief Destructor
     */
    virtual ~{{ class_name }}()
    {
{% if ns.has_control %}
        m_listening = false;
        if (m_recv_thread.joinable()) {
            m_recv_thread.join();
        }
{% endif %}
    }
{% if ns.has_datactxt %}

    /**
    * @brief Bind the data/context recv socket to the desired endpoint for receiving data/context packets
    */
    void data_ctxt_src_endpoint(const data_ctxt_endpoint_type& endpoint)
    {
        if (!m_data_ctxt_recv_socket.bind(endpoint)) {
            throw std::runtime_error("Failed to bind data/context receive socket to " + endpoint.to_string());
        }
    }

    /**
    * @brief Get the source endpoint for receiving data and context packets
    */
    const data_ctxt_endpoint_type& data_ctxt_src_endpoint() const
    {
        return m_data_ctxt_recv_socket.src();
    }

    /**
    * @brief Return a reference to the data/context recv socket for data/context packets
    */
    data_ctxt_socket_type& data_ctxt_recv_socket() noexcept
    {
        return m_data_ctxt_recv_socket;
    }

    /**
    * @brief Set the destination endpoint to send data and context packets to
    */
    void data_ctxt_dst_endpoint(const data_ctxt_endpoint_type& endpoint)
    {
        m_data_ctxt_send_socket.dst(endpoint);
    }

    /**
    * @brief Get the destination endpoint to send data and context packets to
    */
    const data_ctxt_endpoint_type& data_ctxt_dst_endpoint() const
    {
        return m_data_ctxt_send_socket.dst();
    }

    /**
    * @brief Return a reference to the data/context send socket for sending data/context packets
    */
    data_ctxt_socket_type& data_ctxt_send_socket() noexcept
    {
        return m_data_ctxt_send_socket;
    }
{% endif %}

{% for packet in packets if packet.is_control %}
{%   if loop.first %}
{%     if cmd_socket != 'nats' %}
    /**
     * @brief Return a reference to the command socket for sending control packets
     * @return Reference to the command socket
     */
    auto cmd_socket() -> cmd_socket_type&
    {
        return m_cmd_socket;
    }
{%     else %}
    /**
     * @brief Return a reference to the NATS client for sending control packets
     * @return Reference to the NATS client
     */
    auto nats_client() -> vrtgen::nats::client&
    {
        return m_client;
    }
{%     endif %}

    auto vrt_listen() -> void
    {
        if (!m_listening) {
            m_listening = true;
            m_recv_thread = std::thread(&{{ class_name }}::m_listener_func, this);
        }
    }

{%   endif %}
{%   if packet.cam.req_v.enabled %}
    virtual auto validate_{{ packet.name | to_snake }}({{ packet.name }}& packet) -> {{ packet.name }}AckVX = 0;
{%   endif %}
{%   if packet.cam.req_x.enabled %}
{%     if packet.cam.req_s.enabled %}
    virtual auto execute_{{ packet.name | to_snake }}({{ packet.name }}& packet) -> std::tuple<{{ packet.name }}AckVX {{ packet.name }}AckS> = 0;
{%     else %}
    virtual auto execute_{{ packet.name | to_snake }}({{ packet.name }}& packet) -> {{ packet.name }}AckVX = 0;
{%     endif %}
{%   endif %}
{%   if packet.cam.req_s.enabled and not packet.cam.req_x.enabled %}
    virtual auto execute_{{ packet.name | to_snake }}({{ packet.name }}& packet) -> {{ packet.name }}AckS = 0;
{%   endif %}
{% if loop.last %}

{% endif %}
{% endfor %}
protected:
{% for packet in packets if (packet.is_control and packet.controller_id.enabled) %}
{%   if loop.first %}
{%     if cmd_socket != 'nats' %}
    cmd_socket_type m_cmd_socket;
{%     else %}
    vrtgen::nats::client m_client;
{%     endif %}
{%   endif %}
{% endfor %}
{% for packet in packets if (packet.is_data or packet.is_context) %}
{%   if loop.first %}
    data_ctxt_socket_type m_data_ctxt_recv_socket;
    data_ctxt_socket_type m_data_ctxt_send_socket;
{%   endif %}
{% endfor %}

{% if ns.has_control %}
private:
    std::thread m_recv_thread;
    std::atomic_bool m_listening{ false };
{% endif %}
{% for packet in packets if packet.is_control %}
{%   if loop.first %}

    auto m_listener_func() -> void
    {
        while (m_listening) {
{%     if cmd_socket == 'nats' %}
            using namespace std::chrono_literals;
            auto message = m_client.next_msg(1s);
            if (message == nullptr) {
                continue;
            }
{%     else %}
            auto message = message_buffer{};
{%       if cmd_socket == 'tcp' %}
            auto recv_length = m_cmd_socket.read_some(message.data(), message.size());
{%       elif cmd_socket == 'udp' %}
            cmd_endpoint_type endpoint;
            auto recv_length = m_cmd_socket.receive_from(message.data(), m_message.size(), endpoint);
{%       endif %}
            if (recv_length <= 0) {
                continue;
            }
{%     endif %}

{%   endif %}
{%   if cmd_socket == 'nats' %}
            if (auto err = {{ packet.name }}::match(message->data()); !err.has_value()) {
                auto packet = {{ packet.name }}{ message->data() };
{%   else %}
            if (auto err = {{ packet.name }}::match(message); !err.has_value()) {
                auto packet = {{ packet.name }}{ message };
{%   endif %}
{%   if packet.cam.req_v.enabled %}
                if (packet.req_v()) {
                    auto ack_v = this->validate_{{ packet.name | to_snake }}(packet);
                    ack_v.ack_v(true);
                    ack_v.stream_id(packet.stream_id());
                    ack_v.message_id(packet.message_id());
{%     if packet.controllee_id.enabled %}
                    ack_v.controllee_id(packet.controllee_id());
{%     endif %}
{%     if packet.controller_id.enabled %}
                    ack_v.controller_id(packet.controller_id());
{%     endif %}
                    auto packed_data = ack_v.data();
{%     if cmd_socket == 'nats' %}
                    if (auto reply = message->reply_subject(); !reply.empty()) {
                        m_client.publish(reply, packed_data);
                    }
{%     else %}
                    m_cmd_socket.write_some(packed_data.data(), packed_data.size());
{%     endif %}
                }
{%   endif %}
{%   if packet.cam.req_x.enabled %}
                if (packet.req_x()) {
{%     if packet.cam.req_s.enabled %}
                    auto [ack_x, ack_s] = this->execute_{{ packet.name | to_snake }}(packet);
{%     else %}
                    auto ack_x = this->execute_{{ packet.name | to_snake }}(packet);
{%     endif %}
                    ack_x.ack_x(true);
                    ack_x.stream_id(packet.stream_id());
                    ack_x.message_id(packet.message_id());
{%     if packet.controllee_id.enabled %}
                    ack_x.controllee_id(packet.controllee_id());
{%     endif %}
{%     if packet.controller_id.enabled %}
                    ack_x.controller_id(packet.controller_id());
{%     endif %}
                    auto packed_data = ack_x.data();
{%     if cmd_socket == 'nats' %}
                    if (auto reply = message->reply_subject(); !reply.empty()) {
                        m_client.publish(reply, packed_data);
                    }
{%     else %}
                    m_cmd_socket.write_some(packed_data.data(), packed_data.size());
{%     endif %}
{%     if packet.cam.req_s.enabled %}
                    if (packet.req_s()) {
                        ack_s.stream_id(packet.stream_id());
                        ack_s.message_id(packet.message_id());
{%     if packet.controllee_id.enabled %}
                        ack_s.controllee_id(packet.controllee_id());
{%     endif %}
{%     if packet.controller_id.enabled %}
                        ack_s.controller_id(packet.controller_id());
{%     endif %}
                        auto packed_data = ack_s.data();
{%     if cmd_socket == 'nats' %}
                        if (auto reply = message->reply_subject(); !reply.empty()) {
                            m_client.publish(reply, packed_data);
                        }
{%     else %}
                        m_cmd_socket.write_some(packed_data.data(), packed_data.size());
{%     endif %}
                    }
{%     endif %}
                }
{%   endif %}
{%   if packet.cam.req_s.enabled and not packet.cam.req_x.enabled %}
                if (packet.req_s()) {
                    auto ack_s = this->execute_{{ packet.name | to_snake }}(packet);
                    ack_s.stream_id(packet.stream_id());
                    ack_s.message_id(packet.message_id());
{%     if packet.controllee_id.enabled %}
                    ack_s.controllee_id(packet.controllee_id());
{%     endif %}
{%     if packet.controller_id.enabled %}
                    ack_s.controller_id(packet.controller_id());
{%     endif %}
                    auto packed_data = ack_s.data();
{%     if cmd_socket == 'nats' %}
                    if (auto reply = message->reply_subject(); !reply.empty()) {
                        m_client.publish(reply, packed_data);
                    }
{%     else %}
                    m_cmd_socket.write_some(packed_data.data(), packed_data.size());
{%     endif %}
                }
{%   endif %}
            }
{%   if loop.last %}
        }
    }
{%   endif %}
{% endfor %}

}; // end class {{ class_name }}
{% if namespace_ %}

} // end namespace {{ namespace_ }}::controllee
{% endif %}
{% endmacro %}
{{ define_controllee_base(controllee_base_name) }}