/*#
 * Copyright (C) 2023 Geon Technologies, LLC
 *
 * This file is part of vrtgen.
 *
 * vrtgen is free software: you can redistribute it and/or modify it under the
 * terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation, either version 3 of the License, or (at your option)
 * any later version.
 *
 * vrtgen is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for
 * more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see http://www.gnu.org/licenses/.
#*/
{%- macro handle_data(packet) %}
virtual void send_{{ packet.name | to_snake }}({{ packet.name }}& value)
{
    // AUTO-GENERATED FUNCTION STUB
    // IMPLEMENT HARDWARE-SPECIFIC FUNCTIONALITY HERE
    throw std::runtime_error("send_{{ packet.name | to_snake }} not implemented");
}
{% endmacro %}

{%- macro handle_packet_callback(packet) %}
{% if packet.cam.req_v.enabled %}
auto validate_{{ packet.name | to_snake }}({{ packet.name }}& packet) -> {{ packet.name }}AckVX override
{
    // AUTO-GENERATED FUNCTION STUB
    // IMPLEMENT PACKET HANDLING FUNCTIONALITY HERE
    auto ack = {{ packet.name }}AckVX{};
    return ack;
}

{% endif %}
{% if packet.cam.req_x.enabled %}
{%   if packet.cam.req_s.enabled %}
auto execute_{{ packet.name | to_snake }}({{ packet.name }}& packet) -> std::tuple<{{ packet.name }}AckVX, {{ packet.name }}AckS> override
{
    // AUTO-GENERATED FUNCTION STUB
    // IMPLEMENT PACKET HANDLING FUNCTIONALITY HERE
    auto ack_x = {{ packet.name }}AckVX{};
    auto ack_s = {{ packet.name }}AckS{};
    return { ack_x, ack_s };
}

{%   else %}
auto execute_{{ packet.name | to_snake }}({{ packet.name }}& packet) -> {{ packet.name }}AckVX override
{
    // AUTO-GENERATED FUNCTION STUB
    // IMPLEMENT PACKET HANDLING FUNCTIONALITY HERE
    auto ack = {{ packet.name }}AckVX{};
    return ack;
}

{%   endif %}
{% endif %}
{% if packet.cam.req_s.enabled and not packet.cam.req_x.enabled %}
auto execute_{{ packet.name | to_snake }}({{ packet.name }}& packet) -> {{ packet.name}}AckS override
{
    // AUTO-GENERATED FUNCTION STUB
    // IMPLEMENT PACKET HANDLING FUNCTIONALITY HERE
    auto ack = {{ packet.name }}AckS{};
    return ack;
}

{% endif %}
{% endmacro %}

{%- macro define_controllee(class_name, base_class_name) %}
#pragma once

#include <{{ base_class_name }}.hpp>
{% if namespace_ %}

namespace {{ namespace_ }}::controllee {
{% endif %}

class {{ class_name }} : public {{ base_class_name }}
{
public:
{% set ns = namespace(has_datactxt=false,has_control=false) %}
{% for packet in packets %}
{%   if packet.is_data or packet.is_context %}
{%     set ns.has_datactxt = true %}
{%   endif %}
{%   if packet.is_control %}
{%     set ns.has_control = true %}
{%   endif %}
{% endfor %}
{% if ns.has_control %}
    /**
     * @brief Endpoint constructor
     * @param endpoint Desired endpoint to bind command socket to
     */
    explicit {{ class_name }}(const cmd_endpoint_type& endpoint) :
        {{ base_class_name }}(endpoint)
    {
    }
{% else %}
    /**
     * @brief Default constructor
     */
    {{ class_name }}() = default;
{% endif %}

    /**
     * @brief Deconstructor
     */
    ~{{ class_name }}() override = default;

{% for packet in packets if packet.is_control %}
    {{ handle_packet_callback(packet) | indent(4) | trim }}

{% endfor %}
}; // end class {{ class_name }}
{% if namespace_ %}

} // end namespace {{ namespace_ }}::controllee
{% endif %}
{% endmacro %}
{{ define_controllee(controllee_name, controllee_base_name) | trim }}