/*#
 * Copyright (C) 2023 Geon Technologies, LLC
 *
 * This file is part of vrtgen.
 *
 * vrtgen is free software: you can redistribute it and/or modify it under the
 * terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation, either version 3 of the License, or (at your option)
 * any later version.
 *
 * vrtgen is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for
 * more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see http://www.gnu.org/licenses/.
#*/
{%- import "macros/controller/controller.jinja2" as controller %}
#pragma once 

#include <vrtgen/socket.hpp>
{% for packet in packets %}
#include <{{ packet.name | to_snake }}.hpp>
{% endfor %}
{% if namespace_ %}

namespace {{ namespace_ }} {

using namespace {{ namespace_ }}::packets;
{% endif %}

/**
 * @class {{ controller_name }}
 */
class {{ controller_name }}
{
{% set ns = namespace(has_datactxt=false,has_control=false) %}
{% for packet in packets %}
{%   if packet.is_data or packet.is_context %}
{%     set ns.has_datactxt = true %}
{%   endif %}
{%   if packet.is_control %}
{%     set ns.has_control = true %}
{%   endif %}
{% endfor %}
{% if ns.has_control %}
    using cmd_socket_type = vrtgen::socket::{{ cmd_socket }}::v4;
    using cmd_endpoint_type = typename cmd_socket_type::endpoint_type;
{% endif %}
{% if ns.has_datactxt %}
    using data_ctxt_socket_type = vrtgen::socket::udp::v4;
    using data_ctxt_endpoint_type = typename data_ctxt_socket_type::endpoint_type;
    using message_buffer = std::array<uint8_t, 65536>;
{% endif %}

public:
    /**
     * @brief Default constructor
     */
    {{ controller_name }}() = default;
{% if ns.has_control %}

    /**
     * @brief Endpoint constructor
     * @param endpoint Desired endpoint to use for sending command packets
     */
    explicit {{ controller_name }}(const cmd_endpoint_type& endpoint)
    {
        if (!m_cmd_socket.bind(endpoint)) {
            throw std::runtime_error("Failed to bind socket during {{ controller_name }} construction");
        }
    }
{% endif %}

    {{ controller.socket_functions(packets, cmd_socket) | indent(4) | trim }}

    {{ controller.define_functions(packets, controller_name, type_helper) | indent(4) | trim }}

private:
    {{ controller.members(packets, type_helper) | indent(4) | trim }}

{% for packet in packets if packet.is_control %}
{%   if loop.first %}
    auto next_message_id() -> uint32_t
    {
        return m_message_id++;
    }

{%   endif %}
{% endfor %}
{% for packet in packets if (packet.is_data or packet.is_context) %}
{%  if loop.first %}
    void m_receiver_func()
    {
        message_buffer message;
        while(m_receiving) {
            data_ctxt_endpoint_type endpoint;
            auto recv_length = m_data_ctxt_recv_socket.receive_from(message.data(), message.size(), endpoint);
            if (recv_length <= 0) {
                continue;
            }

{%   endif %}
            if (!{{ packet.name }}::match(message)) {
                auto packet = {{ packet.name }}{ message };
                if (m_{{ packet.name | to_snake }}_listener) {
                    m_{{ packet.name | to_snake }}_listener(packet);
                }
            }
{%   if loop.last %}
        }
    }

{%   endif %}
{% endfor %}
}; // end class {{ controller_name }}

{% if namespace_ %}
} // end namespace {{ namespace_ }}
{% endif %}