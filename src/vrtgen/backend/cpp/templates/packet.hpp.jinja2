/*#
 * Copyright (C) 2023 Geon Technologies, LLC
 *
 * This file is part of vrtgen.
 *
 * vrtgen is free software: you can redistribute it and/or modify it under the
 * terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation, either version 3 of the License, or (at your option)
 * any later version.
 *
 * vrtgen is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for
 * more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see http://www.gnu.org/licenses/.
#*/
{%- from "enums.hpp.jinja2" import define_enum %}
{%- import "macros/types/user_class.jinja2" as user_class %}
{%- import "macros/packet/decls.jinja2" as packet_ %}
{%- import "ack_packet.hpp.jinja2" as ack %}

{%- macro define_packet(packet, type_helper) %}
{{ packet_.packet_doc(packet) | trim }}
class {{ packet.name }}
{
public:
    {{ packet_.constructor(packet.name, type_helper) | indent(4) | trim }}

    {{ packet_.unpack_constructor(packet.name, type_helper) | indent(4) | trim }}

    /**
     * @brief Destructor
     */
    ~{{ packet.name }}();

    {{ packet_.public_function_declarations(packet, type_helper) | indent(4) | trim }}

private:
    auto min_bytes() const -> std::size_t;
    auto update_packet_size() -> void;
    auto update_positions() -> void;
    auto sync() -> void;

    {{ packet_.class_members(packet, type_helper) | indent(4) | trim }}

}; // end class {{ packet.name }}
{%- endmacro %}

{%- macro define_header() %}
#pragma once

#include <cstddef>
#include <cstring>
#include <span>
#include <vector>
#include <map>
#include <optional>
#include <vrtgen/vrtgen.hpp>
{% if namespace_ %}

namespace {{ namespace_ }}::packets {
{% endif %}
{% for packet in packets if packet.enums or packet.structs or packet.cif7.enabled %}
{%   if packet.enums %}

namespace {{ packet.name | to_snake }}::enums {

{%     for enum in packet.enums %}
{{ define_enum(enum) | trim }}

{%     endfor %}
} // end namespace {{ packet.name | to_snake }}::enums
{%   endif %}
{%   if packet.structs %}

namespace {{ packet.name | to_snake }}::structs {

{%     for struct in packet.structs %}
{{ user_class.decl(struct, type_helper) | trim }}

{%     endfor %}
} // end namespace {{ packet.name | to_snake }}::structs
{%   endif %}
{% endfor %}

{% for packet in packets %}
{%   if packet.is_ack %}
{{ ack.define_packets(packet, type_helper) | trim}}
{%   else %}
{{ define_packet(packet, type_helper) | trim}}
{%   endif %}

{% endfor %}
{% if namespace_ %}
} // end namespace {{ namespace_ }}::packets
{% endif %}
{% endmacro %}
{{ define_header() }}