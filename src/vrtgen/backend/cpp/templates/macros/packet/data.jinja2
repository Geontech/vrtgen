/*#
 * Copyright (C) 2021 Geon Technologies, LLC
 *
 * This file is part of vrtgen.
 *
 * vrtgen is free software: you can redistribute it and/or modify it under the
 * terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation, either version 3 of the License, or (at your option)
 * any later version.
 *
 * vrtgen is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for
 * more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see http://www.gnu.org/licenses/.
#*/

{% import "macros/types/basic.jinja2" as basic %}

{%- macro trailer_functions(trailer, type_helper) %}
{{ basic.const_ref_getter(trailer, type_helper) | trim }}

{% for field in trailer.fields if field.enabled %}
{%   if field.is_optional %}
{{ basic.optional_functions(field, type_helper, none) | trim }}

{%   endif %}
{{ basic.getters_and_setters(field, type_helper) | trim }}

{% endfor %}
{% endmacro %}

{%- macro public_functions(packet, type_helper) %}
/**
 * @brief Get a const pointer to the underlying payload vector
 * @return A const pointer to the underlying payload vector
 */
const uint8_t* payload() const noexcept
{
    return _payload.data();
}

/**
 * @brief Set the underlying payload vector data
 * @param data Data to assign to the payload vector
 * @param len Length of @param data in bytes
 */
void payload(const void* data, std::size_t len)
{
    _payload.resize(len);
    std::memcpy(_payload.data(), data, len);
}

/**
 * @brief Get the size of the underlying payload vector data
 * @return Number of bytes in the payload data
 */
std::size_t payload_size() const noexcept
{
    return _payload.size();
}

{% if packet.trailer.enabled %}
{{ trailer_functions(packet.trailer, type_helper) | trim }}

{% endif %}
{% endmacro %}

{%- macro members(packet, type_helper) %}
std::vector<uint8_t> _payload;
{% if packet.trailer.enabled %}
{{ basic.member(packet.trailer, type_helper) | trim }}
{%   for field in packet.trailer.fields if field.enabled %}
{{ basic.member(field, type_helper) | trim }}
{%   endfor %}
{% endif %}
{% endmacro %}