/*#
 * Copyright (C) 2023 Geon Technologies, LLC
 *
 * This file is part of vrtgen.
 *
 * vrtgen is free software: you can redistribute it and/or modify it under the
 * terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation, either version 3 of the License, or (at your option)
 * any later version.
 *
 * vrtgen is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for
 * more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see http://www.gnu.org/licenses/.
#*/
{%- import "macros/function_defs.jinja2" as function_defs %}
{%- from "macros/function_defs/bytes_required.jinja2" import bytes_required %}
{%- from "macros/function_defs/match.jinja2" import match %}
{%- import "macros/function_defs/constructors.jinja2" as constructors %}

{%- macro update_positions(packet, type_helper) %}
THIS UPDATE SHOULD FAIL
{% set ns = namespace(curr_pos=0) %}
auto {{ packet.name }}::update_positions() -> void
{
{% if packet.cif0.enabled %}
{%   for field in packet.cif0.fields if field.enabled and not field.indicator_only %}
{%     if loop.first %}
    auto curr_pos = m_positions.at("{{ packet.cif0.name }}") + m_{{ packet.cif0.name }}.size();
{%       if packet.cif1.enabled %}
    m_positions["{{ packet.cif1.name }}"] = curr_pos;
{%         if packet.cif1.is_optional %}
    if (m_{{ packet.cif1.name }}.has_value()) {
        curr_pos += m_{{ packet.cif1.name }}->size();
    }
{%         else %}
    curr_pos += m_{{ packet.cif1.name }}.size();
{%         endif %}
{%       endif %}
{%     endif %}
    m_positions["{{ field.name }}"] = curr_pos;
{%     if field.is_optional %}
    if (m_{{ packet.cif0.name }}.{{ field.name }}()) {
{%       if type_helper.is_scalar(field) %}
        curr_pos += sizeof({{ type_helper.member_type(field) }});
{%       else %}
        curr_pos += m_{{ field.name }}->size();
{%       endif %}
    }
{%     else %}
{%       if type_helper.is_scalar(field) %}
    curr_pos += sizeof({{ type_helper.member_type(field) }}); // {{ field.name }}
{%       else %}
    curr_pos += m_{{ field.name }}.size();
{%       endif %}
{%     endif %}
{%   endfor %}
{% endif %}
{% if packet.cif1.enabled %}
{%   if packet.cif1.is_optional %}
    if (m_{{ packet.cif1.name }}.has_value()) {
{%   endif %}
{%   for field in packet.cif1.fields if field.enabled and not field.indicator_only %}
    {{ '    ' if packet.cif1.is_optional }}m_positions["{{ field.name }}"] = curr_pos;
{%     if field.is_optional %}
    {{ '    ' if packet.cif1.is_optional }}if (m_{{ packet.cif1.name }}{{ '->' if packet.cif1.is_optional else '.' }}{{ field.name }}()) {
{%       if type_helper.is_scalar(field) %}
        {{ '    ' if packet.cif1.is_optional }}curr_pos += sizeof({{ type_helper.member_type(field) }});
{%       else %}
        {{ '    ' if packet.cif1.is_optional }}curr_pos += m_{{ field.name }}->size();
{%       endif %}
    {{ '    ' if packet.cif1.is_optional }}}
{%     else %}
{%       if type_helper.is_scalar(field) %}
    {{ '    ' if packet.cif1.is_optional }}curr_pos += sizeof({{ type_helper.member_type(field) }}); // {{ field.name }}
{%       else %}
    {{ '    ' if packet.cif1.is_optional }}curr_pos += m_{{ field.name }}.size();
{%       endif %}
{%     endif %}
{%   endfor %}
{%   if packet.cif1.is_optional %}
    }
{%   endif %}
{% endif %}
}
{% endmacro %}

{%- macro sync(packet, type_helper) %}
---------------------------------------------------------------------------
auto {{ packet.name }}::sync() -> void
{
{% if packet.cif0.enabled %}
{%   for field in packet.cif0.fields if field.enabled and not type_helper.is_scalar(field) %}
{%     if field.is_optional %}
    if (m_{{ field.name }}.has_value()) {
        if (!m_{{ packet.cif0.name }}.{{ field.name }}()) {
            m_data.insert(m_data.begin() + m_positions.at("{{ field.name }}"), m_{{ field.name }}->size(), 0);
            m_{{ packet.cif0.name }}.{{ field.name }}(true);
            update_positions();
            update_packet_size();
        }
        m_{{ field.name }}->pack_into(m_data.data() + m_positions.at("{{ field.name }}"));
        m_{{ packet.cif0.name }}.pack_into(m_data.data() + m_positions.at("{{ packet.cif0.name }}"));
    }
{%     else %}
    m_{{ field.name }}.pack_into(m_data.data() + m_positions.at("{{ field.name }}"));
{%     endif %}
{%   endfor %}
{% endif %}
{% if packet.cif1.enabled %}
{%   for field in packet.cif1.fields if field.enabled and not type_helper.is_scalar(field) %}
{%     if field.is_optional %}
    if (m_{{ field.name }}.has_value()) {
{%       if packet.cif1.is_optional %}
        if (!m_{{ packet.cif1.name }}.has_value()) {
            m_{{ packet.cif1.name }} = {{ type_helper.value_type(packet.cif1) }}{};
            m_data.insert(m_data.begin() + m_positions.at("{{ packet.cif1.name }}"), m_{{ packet.cif1.name }}->size(), 0);
            update_positions();
            update_packet_size();
            if (!m_{{ packet.cif0.name }}.cif1_enable()) {
                m_{{ packet.cif0.name }}.cif1_enable(true);
                m_{{ packet.cif0.name }}.pack_into(m_data.data() + m_positions.at("{{ packet.cif0.name }}"));
            }
        }
{%       endif %}
        if (!m_{{ packet.cif1.name }}{{ '->' if packet.cif1.is_optional else '.' }}{{ field.name }}()) {
            m_data.insert(m_data.begin() + m_positions.at("{{ field.name }}"), m_{{ field.name }}->size());
            m_{{ packet.cif1.name }}{{ '->' if packet.cif1.is_optional else '.' }}{{ field.name }}(true);
            update_positions();
            update_packet_size();
        }
        m_{{ field.name }}->pack_into(m_data.data() + m_positions.at("{{ field.name }}"));
        m_{{ packet.cif1.name }}{{ '->' if packet.cif1.is_optional else '.' }}pack_into(m_data.data() + m_positions.at("{{ packet.cif1.name }}"));
    }
{%     else %}
    m_{{ field.name }}.pack_into(m_data.data() + m_positions.at("{{ field.name }}"));
{%     endif %}
{%   endfor %}
{%   if packet.cif1.is_optional %}
    if (m_{{ packet.cif1.name }}.has_value() && m_{{ packet.cif1.name }}->none()) {
        reset_{{ packet.cif1.name }}();
    }
{%   endif %}
{% endif %}
{% if packet.is_data and packet.trailer.enabled %}
    m_{{ packet.trailer.name }}.pack_into(m_data.data() + m_positions.at("{{ packet.trailer.name }}"));
{% endif %}
}
{% endmacro %}

{%- macro packet_functions(packet, type_helper) %}
/**
 * {{ packet.name }} class functions
 */
{{ constructors.constructor(packet, type_helper) | trim }}

{{ constructors.unpack_constructor(packet, type_helper) | trim }}

auto {{ packet.name }}::name() const -> std::string
{
    return m_name;
}

{{ match(packet, type_helper) | trim }}
---------------------------------***************************************
{{ function_defs.prologue(packet, type_helper) | trim }}

{% if packet.is_command %}
{{ function_defs.command(packet, type_helper) | trim }}

{% endif %}
{% if packet.is_context or packet.is_command %}
{{ function_defs.cif(packet, packet.name, type_helper) | trim }}

{% endif %}
{% if packet.is_data %}
{{ function_defs.data(packet, type_helper) | trim }}

{% endif %}
auto {{ packet.name }}::data() -> std::span<const uint8_t>
{
    sync();
    return { m_data.data(), m_data.size() };
}

auto {{ packet.name }}::size() -> std::size_t
{
    return data().size();
}

auto {{ packet.name }}::update_packet_size() -> void
{
    m_header.packet_size(static_cast<uint16_t>((m_data.size() + 3) / 4));
    m_header.pack_into(m_data.data());
}

{{ update_positions(packet, type_helper) | trim }}

{{ bytes_required(packet, type_helper) | trim}}

{{ sync(packet, type_helper) | trim }}
{% endmacro %}

{%- macro define_source() %}
DOUBT IT
#include "{{ header }}"

{% if namespace_ %}
namespace {{ namespace_ }}::packets {

{% endif %}
{% for packet in packets %}
{%   if packet.is_ack %}
{{ ack.packet_functions(packet, type_helper) | trim}}
{%   else %}
{{ packet_functions(packet, type_helper) | trim }}
{%   endif %}

{% endfor %}
{% if namespace_ %}
} // end namespace {{ namespace_ }}::packets
{% endif %}
{% endmacro %}
{{ define_source() }}