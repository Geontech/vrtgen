/*#
 * Copyright (C) 2021 Geon Technologies, LLC
 *
 * This file is part of vrtgen.
 *
 * vrtgen is free software: you can redistribute it and/or modify it under the
 * terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation, either version 3 of the License, or (at your option)
 * any later version.
 *
 * vrtgen is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for
 * more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see http://www.gnu.org/licenses/.
#*/

{%- macro unpack_cif_field(field, cif7, type_helper) %}
{% if cif7.enabled %}
{%    if cif7.current_value_enabled %}
{{ unpack_field(field, type_helper) }}
{%    endif %}
{{ unpack_cif7_field(field, cif7.attributes.fields, cif7.name, type_helper) }}
{% else %}
{{ unpack_field(field, type_helper) }}
{% endif %}
{% endmacro %}

{%- macro unpack_field(field, type_helper) %}
{% if field.type_.reserved_bits != 0 %}
buffer.next<int{{ field.type_.reserved_bits }}_t>(); // {{ field.name }} reserved bits
{% endif %}
{% if field.type_.is_fixed_point %}
packet._{{ field.name }} = buffer.next<int{{ field.type_.bits }}_t>();
{% else %}
packet._{{ field.name }} = buffer.next<{{ type_helper.value_type(field) }}>();
{% endif %}
{%- endmacro %}

{%- macro unpack_cif7_field(field, attribute_fields, cif7_name, type_helper) %}
{%   for attribute_field in attribute_fields if attribute_field.enabled and not attribute_field.indicator_only %}
if ({{ cif7_name }}->{{ attribute_field.getter }}()) {
{% if field.is_optional %}
{% set access_operator = '->' %}
{% else %}
{% set access_operator = '.' %}
{% endif %}
{%      if attribute_field.type_.is_probability_type or attribute_field.type_.is_belief_type %}
    packet._{{ field.name }}_attributes{{ access_operator }}{{ attribute_field.getter }}(buffer.next<{{ type_helper.value_type(attribute_field) }}>());
{%      else %}
{%         if field.type_.reserved_bits != 0 %}
    buffer.next<int{{ field.type_.reserved_bits }}_t>(); // {{ attribute_field.name }} reserved bits
{%         endif %}
{%         if field.type_.is_fixed_point %}
    packet._{{field.name }}_attributes{{ access_operator }}{{ attribute_field.setter }}(vrtgen::fixed::to_fp{{ type_helper.fixed_template(field) }}(vrtgen::swap::to_be(buffer.next<int{{ field.type_.bits }}_t>())));
{%         else %}
    packet._{{ field.name }}_attributes{{ access_operator }}{{ attribute_field.setter }}(buffer.next<{{ type_helper.value_type(field) }}>());
{%         endif %}
{%     endif %}
}
{%   endfor %}
{%- endmacro %}

{%- macro unpack_cif(packet, cif, cif7, type_helper) %}
{% if packet.requires_cif_functions %}
{%   for field in cif.fields if field.enabled %}
{%     if field.indicator_only %}
packet.{{ field.setter }}({{ cif.name }}->{{ field.getter }}());
{%     elif field.is_optional %}
if (!{{ cif.name }}->{{ field.getter }}()) {
    packet.reset_{{ field.name }}();
} else {
    {{ unpack_cif_field(field, cif7, type_helper) | indent(4) | trim }}
}
{%     else %}
{{ unpack_cif_field(field, cif7, type_helper) | trim }}
{%     endif %}
{%   endfor %}
{% elif packet.requires_cif_enable_functions %}
{%   for field in cif.fields if field.enabled and not field.indicator_only %}
packet.{{ field.setter }}_enabled({{ cif.name }}->{{ field.getter }}());
{%   endfor %}
{% endif %}
{% endmacro %}

{%- macro unpack_wif(wif, type_helper) %}
{% for field in wif.fields if field.enabled %}
if (!{{ wif.name }}->{{ field.getter }}()) {
    packet.reset_{{ field.name }}_warnings();
} else {
    packet.{{ field.name }}_warnings(buffer.next<{{ type_helper.value_type(field.type_) }}>());
}
{% endfor %}
{% endmacro %}

{%- macro unpack_eif(eif, type_helper) %}
{% for field in eif.fields if field.enabled %}
if (!{{ eif.name }}->{{ field.getter }}()) {
    packet.reset_{{ field.name }}_errors();
} else {
    packet.{{ field.name }}_errors(buffer.next<{{ type_helper.value_type(field.type_) }}>());
}
{% endfor %}
{% endmacro %}

{%- macro define_unpack(packet, type_helper) %}
void {{ packet.helper }}::unpack({{ packet.name }}& packet, const void* ptr, std::size_t bufsize)
{
    vrtgen::OverlayBuffer buffer(ptr, bufsize);
    const auto {{ packet.header.name }} = buffer.next<{{ type_helper.member_type(packet.header) }}>();
{% for field in packet.header.fields if (field.is_boolean or field.is_enum) %}
    vrtgen::validate(header.{{ field.getter }}(), {{ type_helper.literal_value(field) | trim }}, "invalid header field: {{ field.name }}");
{% endfor %}
    packet._{{ packet.header.name }} = {{ packet.header.name }};
{% if packet.stream_id.enabled %}
    packet._{{ packet.stream_id.name }} = buffer.next<{{ type_helper.member_type(packet.stream_id) }}>();
{% endif %}
{% if packet.class_id.enabled %}
    const auto {{ packet.class_id.name }} = buffer.next<{{ type_helper.value_type(packet.class_id) }}>();
{%   for field in packet.class_id.fields %}
    vrtgen::validate({{ packet.class_id.name }}.{{ field.getter }}(), {{ type_helper.literal_value(field) | trim }}, "invalid class id field: {{ field.name }}");
{%   endfor %}
    packet._{{ packet.class_id.name }} = {{ packet.class_id.name }};
{% endif %}
{% if packet.timestamp.enabled %}
{%   if packet.timestamp.integer.enabled %}
    packet._{{ packet.timestamp.integer.name }} = buffer.next<{{ type_helper.value_type(packet.timestamp.integer) }}>();
{%   endif %}
{%   if packet.timestamp.fractional.enabled %}
    packet._{{ packet.timestamp.fractional.name }} = buffer.next<{{ type_helper.value_type(packet.timestamp.fractional) }}>();
{%   endif %}
{% endif %}
{% if packet.cam.enabled %}
    const auto {{ packet.cam.name }} = buffer.next<{{ type_helper.member_type(packet.cam) }}>();
{%   for field in packet.cam.fields if field.enabled %}
    vrtgen::validate({{ packet.cam.name }}.{{ field.getter }}(), {{ type_helper.literal_value(field) | trim }}, "invalid cam field: {{ field.name }}");
{%   endfor %}
    packet._{{ packet.cam.name }} = {{ packet.cam.name }};
{% endif %}
{% if packet.message_id.enabled %}
    packet._{{ packet.message_id.name }} =buffer.next<{{ type_helper.value_type(packet.message_id) }}>();
{% endif %}
{% if packet.controllee_id.enabled %}
    packet.{{ packet.controllee_id.getter }}(buffer.next<{{ type_helper.value_type(packet.controllee_id) }}>());
{% endif %}
{% if packet.controller_id.enabled %}
    packet.{{ packet.controller_id.getter }}(buffer.next<{{ type_helper.member_type(packet.controller_id) }}>());
{% endif %}
{% if packet.cif0.enabled %}
    auto {{ packet.cif0.name }} = std::make_unique<{{ type_helper.value_type(packet.cif0) }}>(buffer.next<{{ type_helper.value_type(packet.cif0) }}>());
{%   if packet.cif1.enabled %}
    std::unique_ptr<{{ type_helper.value_type(packet.cif1) }}> {{ packet.cif1.name }}{ nullptr };
    if ({{ packet.cif0.name }}->cif1_enable()) {
        {{ packet.cif1.name }} = std::make_unique<{{ type_helper.value_type(packet.cif1) }}>(buffer.next<{{ type_helper.value_type(packet.cif1) }}>());
    }
{%   endif %}
{%   if packet.cif2.enabled %}
    std::unique_ptr<{{ type_helper.value_type(packet.cif2) }}> {{ packet.cif2.name }}{ nullptr };
    if ({{ packet.cif0.name }}->cif2_enable()) {
        {{ packet.cif2.name }} = std::make_unique<{{ type_helper.value_type(packet.cif2) }}>(buffer.next<{{ type_helper.value_type(packet.cif2) }}>());
    }
{%   endif %}
{%   if packet.cif7.enabled %}
    std::unique_ptr<{{ type_helper.value_type(packet.cif7) }}> {{ packet.cif7.name }}{ nullptr };
    if ({{ packet.cif0.name }}->cif7_enable()) {
        {{ packet.cif7.name }} = std::make_unique<{{ type_helper.value_type(packet.cif7) }}>(buffer.next<{{ type_helper.value_type(packet.cif7) }}>());
    }
{%   endif %}
    {{ unpack_cif(packet, packet.cif0, packet.cif7, type_helper) | indent(4) | trim }}
{% endif %}
{% if packet.cif1.enabled %}
    if (cif_1) {
        {{ unpack_cif(packet, packet.cif1, packet.cif7, type_helper) | indent(8) | trim }}
    }
{% endif %}
{% if packet.cif2.enabled %}
    if (cif_2) {
        {{ unpack_cif(packet, packet.cif2, packet.cif7, type_helper) | indent(8) | trim }}
    }
{% endif %}
{% if packet.warnings_enabled %}
    std::unique_ptr<{{ type_helper.value_type(packet.wif0) }}> {{ packet.wif0.name }}{ nullptr };
{%   if packet.wif1.enabled %}
    std::unique_ptr<{{ type_helper.value_type(packet.wif1) }}> {{ packet.wif1.name }}{ nullptr };
{%   endif %}
{%   if packet.wif2.enabled %}
    std::unique_ptr<{{ type_helper.value_type(packet.wif2) }}> {{ packet.wif2.name }}{ nullptr };
{%   endif %}
    if ({{ packet.cam.name }}.ack_w()) {
        {{ packet.wif0.name }} = std::make_unique<{{ type_helper.value_type(packet.wif0) }}>(buffer.next<{{ type_helper.value_type(packet.wif0) }}>());
{%   if packet.wif1.enabled %}
        if ({{ packet.wif0.name }}->wif1_enable()) {
            {{ packet.wif1.name }} = std::make_unique<{{ type_helper.value_type(packet.wif1) }}>(buffer.next<{{ type_helper.value_type(packet.wif1) }}>());
        }
{%   endif %}
{%   if packet.wif2.enabled %}
        if ({{ packet.wif0.name }}->wif2_enable()) {
            {{ packet.wif2.name }} = std::make_unique<{{ type_helper.value_type(packet.wif2) }}>(buffer.next<{{ type_helper.value_type(packet.wif2) }}>());
        }
{%   endif %}
    }
{% endif %}
{% if packet.errors_enabled %}
    std::unique_ptr<{{ type_helper.value_type(packet.eif0) }}> {{ packet.eif0.name }}{ nullptr };
{%   if packet.wif1.enabled %}
    std::unique_ptr<{{ type_helper.value_type(packet.eif1) }}> {{ packet.eif1.name }}{ nullptr };
{%   endif %}
{%   if packet.wif2.enabled %}
    std::unique_ptr<{{ type_helper.value_type(packet.eif2) }}> {{ packet.eif2.name }}{ nullptr };
{%   endif %}
    if ({{ packet.cam.name }}.ack_er()) {
        {{ packet.eif0.name }} = std::make_unique<{{ type_helper.value_type(packet.eif0) }}>(buffer.next<{{ type_helper.value_type(packet.eif0) }}>());
{%   if packet.eif1.enabled %}
        if ({{ packet.eif0.name }}->eif1_enable()) {
            {{ packet.eif1.name }} = std::make_unique<{{ type_helper.value_type(packet.eif1) }}>(buffer.next<{{ type_helper.value_type(packet.eif1) }}>());
        }
{%   endif %}
{%   if packet.eif2.enabled %}
        if ({{ packet.eif0.name }}->eif2_enable()) {
            {{ packet.eif2.name }} = std::make_unique<{{ type_helper.value_type(packet.eif2) }}>(buffer.next<{{ type_helper.value_type(packet.eif2) }}>());
        }
{%   endif %}
    }
{% endif %}
{% if packet.warnings_enabled %}
    if ({{ packet.cam.name }}.ack_w()) {
        {{ unpack_wif(packet.wif0, type_helper) | indent(8) | trim }}
{%   if packet.wif1.enabled %}
        if ({{ packet.wif1.name }}) {
            {{ unpack_wif(packet.wif1, type_helper) | indent(12) | trim }}
        }
{%   endif %}
{%   if packet.wif2.enabled %}
        if ({{ packet.wif2.name }}) {
            {{ unpack_wif(packet.wif2, type_helper) | indent(12) | trim }}
        }
{%   endif %}
    }
{% endif %}
{% if packet.errors_enabled %}
    if ({{ packet.cam.name }}.ack_er()) {
        {{ unpack_eif(packet.eif0, type_helper) | indent(8) | trim }}
{%   if packet.eif1.enabled %}
        if ({{ packet.eif1.name }}) {
            {{ unpack_eif(packet.eif1, type_helper) | indent(12) | trim }}
        }
{%   endif %}
{%   if packet.eif2.enabled %}
        if ({{ packet.eif2.name }}) {
            {{ unpack_eif(packet.eif2, type_helper) | indent(12) | trim }}
        }
{%   endif %}
    }
{% endif %}
{% if packet.is_data %}
    const size_t len = bufsize - buffer.pos(){{ ' - packet.'+packet.trailer.getter+'().size()' if packet.trailer.enabled }};
    const auto* data = buffer.next(len); 
    packet.payload(data, len);
{%   if packet.trailer.enabled %}
    const auto trailer = buffer.next<{{ type_helper.member_type(packet.trailer) }}>();
{%     for field in packet.trailer.fields if field.enabled and not field.is_packed_type %}
{%       if field.is_optional %}
    if (!trailer.{{ field.getter }}_enable()) {
        packet.reset_{{ field.name }}();
    } else {
        packet.{{ field.setter }}(trailer.{{ field.getter }}());
    }
{%       else %}
    packet.{{ field.setter }}(trailer.{{ field.getter }}());
{%       endif %}
{%     endfor %}
    packet._trailer = trailer;
{%   endif %}
{% endif %}
}
{% endmacro %}
