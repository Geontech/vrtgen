/*#
 * Copyright (C) 2021 Geon Technologies, LLC
 *
 * This file is part of vrtgen.
 *
 * vrtgen is free software: you can redistribute it and/or modify it under the
 * terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation, either version 3 of the License, or (at your option)
 * any later version.
 *
 * vrtgen is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for
 * more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see http://www.gnu.org/licenses/.
#*/

{%- macro define_cif_bytes_required(cif, type_helper) %}
{% for field in cif.fields if field.enabled and not field.indicator_only %}
{%   if field.is_optional %}
if (packet.has_{{ field.name }}()) {
{%     if field.type_.reserved_bits != 0 %}
    bytes += sizeof(int{{ field.type_.reserved_bits }}_t); // {{ field.name }} reserved bits
{%     endif %}
{%     if type_helper.is_scalar(field) %}
    bytes += sizeof({{ type_helper.member_type(field) }}); // {{ field.name }}
{%     else %}
    bytes += packet.{{ field.getter }}().size();
{%     endif %}
}
{%   else %}
{% if field.type_.reserved_bits != 0 %}
bytes += sizeof(int{{ field.type_.reserved_bits }}_t); // {{ field.name }} reserved bits
{% endif %}
{%     if type_helper.is_scalar(field) %}
bytes += sizeof({{ type_helper.member_type(field) }}); // {{ field.name }}
{%     else %}
bytes += packet.{{ field.getter }}().size();
{%     endif %}
{%   endif %}
{% endfor %}
{%- endmacro %}

{%- macro define_bytes_required(packet, type_helper) %}
std::size_t {{ packet.helper }}::bytes_required(const {{ packet.name }}& packet)
{
    std::size_t bytes = packet.header().size();
{% if packet.stream_id.enabled %}
    bytes += sizeof({{ type_helper.value_type(packet.stream_id) }}); // stream id
{% endif %}
{% if packet.class_id.enabled %}
    bytes += packet.{{ packet.class_id.getter }}().size();
{% endif %}
{% if packet.timestamp.enabled %}
{%     if packet.timestamp.integer.enabled %}
    bytes += sizeof({{ type_helper.value_type( packet.timestamp.integer) }}); // integer timestamp
{%     endif %}
{%     if packet.timestamp.fractional.enabled %}
    bytes += sizeof({{ type_helper.value_type(packet.timestamp.fractional) }}); // fractional timestamp
{%     endif %}
{% endif %}
{% if packet.cam.enabled %}
    bytes += packet.{{ packet.cam.getter }}().size();
{% endif %}
{% if packet.message_id.enabled %}
    bytes += sizeof({{ type_helper.value_type(packet.message_id) }}); // message id
{% endif %}
{% if packet.controllee_id.enabled %}
{%   if type_helper.is_scalar(packet.controllee_id) %}
    bytes += sizeof({{ type_helper.value_type(packet.controllee_id) }}); // controllee id
{%   else %}
    bytes += packet.{{ packet.controllee_id.getter }}().size();
{%   endif %}
{% endif %}
{% if packet.controller_id.enabled %}
{%   if type_helper.is_scalar(packet.controller_id) %}
    bytes += sizeof({{ type_helper.value_type(packet.controller_id) }}); // controller id
{%   else %}
    bytes += packet.{{ packet.controller_id.getter }}().size();
{%   endif %}
{% endif %}
{% if packet.cif0.enabled %}
    bytes += packet.{{ packet.cif0.getter }}().size();
{%   if packet.requires_cif_functions %}
    {{ define_cif_bytes_required(packet.cif0, type_helper) | indent(4) | trim }}
{%   endif %}
{% endif %}
{% if packet.cif1.enabled  %}
{%   if packet.cif1.all_optional_fields %}
    if (packet.has_{{ packet.cif1.name }}_fields()) {
        bytes += packet.{{ packet.cif1.getter }}().size();
    }
{%   else %}
    bytes += packet.{{ packet.cif1.getter }}().size();
{%   endif %}
{%   if packet.requires_cif_functions %}
    {{ define_cif_bytes_required(packet.cif1, type_helper) | indent(4) | trim }}
{%   endif %}
{% endif %}
{% if packet.cif2.enabled  %}
{%   if packet.cif2.all_optional_fields %}
    if (packet.has_{{ packet.cif2.name }}_fields()) {
        bytes += packet.{{ packet.cif2.getter }}().size();
    }
{%   else %}
    bytes += packet.{{ packet.cif2.getter }}().size();
{%   endif %}
{%   if packet.requires_cif_functions %}
    {{ define_cif_bytes_required(packet.cif2, type_helper) | indent(4) | trim }}
{%   endif %}
{% endif %}
{% if packet.wif0.enabled and packet.warnings_enabled %}
    if (packet.has_{{ packet.wif0.name }}_warnings()) {
        bytes += packet.{{ packet.wif0.getter }}().size();
{%   for field in packet.wif0.fields if field.enabled %}
        if (packet.has_{{ field.name }}_warnings()) {
            bytes += packet.{{ field.getter }}_warnings().size();
        }
{%   endfor %}
    }
{% endif %}
{% if packet.wif1.enabled and packet.warnings_enabled %}
    if (packet.has_{{ packet.wif1.name }}_warnings()) {
        if (!packet.has_{{ packet.wif0.name }}_warnings()) {
            bytes += packet.{{ packet.wif0.getter }}().size();
        }
        bytes += packet.{{ packet.wif1.getter }}().size();
{%   for field in packet.wif1.fields if field.enabled %}
        if (packet.has_{{ field.name }}_warnings()) {
            bytes += packet.{{ field.getter }}_warnings().size();
        }
{%   endfor %}
    }
{% endif %}
{% if packet.wif2.enabled and packet.warnings_enabled %}
    if (packet.has_{{ packet.wif2.name }}_warnings()) {
        if (!packet.has_{{ packet.wif0.name }}_warnings() && !packet.has_{{ packet.wif1.name }}_warnings()) {
            bytes += packet.{{ packet.wif0.getter }}().size();
        }
        bytes += packet.{{ packet.wif2.getter }}().size();
{%   for field in packet.wif2.fields if field.enabled %}
        if (packet.has_{{ field.name }}_warnings()) {
            bytes += packet.{{ field.getter }}_warnings().size();
        }
{%   endfor %}
    }
{% endif %}
{% if packet.eif0.enabled and packet.errors_enabled %}
    if (packet.has_{{ packet.eif0.name }}_errors()) {
        bytes += packet.{{ packet.eif0.getter }}().size();
{%   for field in packet.eif0.fields if field.enabled %}
        if (packet.has_{{ field.name }}_errors()) {
            bytes += packet.{{ field.getter }}_errors().size();
        }
{%   endfor %}
    }
{% endif %}
{% if packet.eif1.enabled and packet.errors_enabled %}
    if (packet.has_{{ packet.eif1.name }}_errors()) {
        if (!packet.has_{{ packet.eif0.name }}_errors()) {
            bytes += packet.{{ packet.eif0.getter }}().size();
        }
        bytes += packet.{{ packet.eif1.getter }}().size();
{%   for field in packet.eif1.fields if field.enabled %}
        if (packet.has_{{ field.name }}_errors()) {
            bytes += packet.{{ field.getter }}_errors().size();
        }
{%   endfor %}
    }
{% endif %}
{% if packet.eif2.enabled and packet.errors_enabled %}
    if (packet.has_{{ packet.eif2.name }}_errors()) {
        if (!packet.has_{{ packet.eif0.name }}_errors() && !packet.has_{{ packet.eif0.name }}_errors()) {
            bytes += packet.{{ packet.eif0.getter }}().size();
        }
        bytes += packet.{{ packet.eif2.getter }}().size();
{%   for field in packet.eif2.fields if field.enabled %}
        if (packet.has_{{ field.name }}_errors()) {
            bytes += packet.{{ field.getter }}_errors().size();
        }
{%   endfor %}
    }
{% endif %}
{% if packet.is_data %}
    bytes += packet.payload_size();
{%   if packet.trailer.enabled %}
    bytes += packet.{{ packet.trailer.getter }}().size();
{%   endif %}
{% endif %}
    return bytes;
}
{% endmacro %}