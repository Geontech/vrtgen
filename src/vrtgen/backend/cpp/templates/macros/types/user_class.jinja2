/*#
 * Copyright (C) 2021 Geon Technologies, LLC
 *
 * This file is part of vrtgen.
 *
 * vrtgen is free software: you can redistribute it and/or modify it under the
 * terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation, either version 3 of the License, or (at your option)
 * any later version.
 *
 * vrtgen is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for
 * more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see http://www.gnu.org/licenses/.
#*/
{% import "macros/types/basic.jinja2" as basic %}
{% import "macros/function_decls.jinja2" as common %}

{%- macro define_class(class, type_helper) %}
{% set fields = (class.fields | sort_packed_tags) %}
/**
{% for line in (class.__doc__ | format_docstring) %}
 * {{ line | trim }}
{% endfor %}
 */
 {% if class.is_template %}
template < typename {{ class.template_name }} >
 {% endif %}
class {{ class.type_ }} {% if class.child_of %} : public vrtgen::packing::{{ class.child_of }} {% endif %}
{
public:
{% for field in fields if field.enabled and not field.is_packed_type %}
{% set packed = field.packed_tag.packed_int is not none and field.user_defined %}
{% if class.child_of or field.is_extension_type %}
{%   if field.packed_tag.packed_int is not none and field.user_defined %}
    {{ basic.getters_and_setters(field, type_helper, true) | indent(4) | trim }}
{%   endif %}
{% else %}
    {{ basic.getters_and_setters(field, type_helper) | indent(4) | trim }}
{% endif %}
{% endfor %}
{% if not class.child_of %}
    size_t size() const
    {
        return m_packed.size();
    }

    void pack_into(uint8_t* buffer_ptr) const
    {
        m_packed.pack_into(buffer_ptr);
    }

    void unpack_from(const uint8_t* data)
    {
        m_packed.unpack_from(data);
    }
{% endif %}

private:
{% for field in fields if field.enabled and not field.is_packed_type %}
{%     if loop.first %}
    /*
{%     endif %}
     * {{ field.name }} {{ field.packed_tag.field_word }}/{{ field.packed_tag.position }} 
{%     if loop.last %}
     */
{%     endif %}
{% endfor %}
{% for field in fields if field.enabled %}
{%     set tag = field.packed_tag %}
{%     if class.is_template %}
{%         if field.type_.is_packed_struct %}
    {{ type_helper.member_type(field) }} _{{ field.name }};
{%         else %}
    T _{{field.name}};
{%         endif %}
{%     elif tag.packed_int is none %}
    {{ basic.member(field, type_helper) | indent(4) | trim }}
{%     endif %}
{% endfor %}

}; // end class {{ class.type_ }}

{%- endmacro %}