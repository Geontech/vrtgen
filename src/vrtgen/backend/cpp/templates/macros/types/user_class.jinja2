/*#
 * Copyright (C) 2021 Geon Technologies, LLC
 *
 * This file is part of vrtgen.
 *
 * vrtgen is free software: you can redistribute it and/or modify it under the
 * terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation, either version 3 of the License, or (at your option)
 * any later version.
 *
 * vrtgen is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for
 * more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see http://www.gnu.org/licenses/.
#*/

{%- macro define_class(class, type_helper) %}
{% set fields = (class.fields | sort_packed_tags) %}
/**
{% for line in (class.__doc__ | format_docstring) %}
 * {{ line | trim }}
{% endfor %}
 */
class {{ class.type_ }}
{
public:
{% for field in fields if field.enabled and not field.is_packed_type %}
{%     if not type_helper.is_scalar(field) %}
    {{ type_helper.value_type(field) }}& {{ field.getter }}()
    {
        return m_{{ field.name }};
    }

    const {{ type_helper.value_type(field) }}& {{ field.getter }}() const
    {
        return m_{{ field.name }};
    }

    void {{ field.setter }}(const {{ type_helper.value_type(field) }}& value)
    {
        m_{{ field.name }} = value;
    }

{%     else %}
    {{ type_helper.value_type(field) }} {{ field.getter }}() const
    {
{% if field.packed_tag.packed_int is not none %}
        return m_packed_{{ field.packed_tag.packed_int }}.get({{ field.name }}_tag());
{% elif field.is_fixed_point %}
        return m_{{ field.name }};
{% elif field.is_integer_type %}
        return vrtgen::from_be(m_{{ field.name }});
{% endif %}
    }

    void {{ field.setter }}(const {{ type_helper.value_type(field) }} value)
    {
{% if field.packed_tag.packed_int is not none %}
        m_packed_{{ field.packed_tag.packed_int }}.set(value, {{ field.name }}_tag());
{% elif field.is_fixed_point %}
        m_{{ field.name }} = value;
{% elif field.is_integer_type %}
        m_{{ field.name }} = vrtgen::to_be(value);
{% endif %}
    }

{%     endif %}
{% endfor %}
{% if class.is_array_struct %}
    size_t size() const
{% else %}
    size_t size() const
{% endif %}
    {
        size_t retval = 0;
{% for field in fields if field.enabled and field.packed_tag.packed_int is none %}
{%   if type_helper.is_scalar(field) %}
        retval += sizeof({{ type_helper.value_type(field) }}); // {{ field.name }}
{%   else %}
{%     if field.is_list %}
        for (const auto{{ '&' if not type_helper.is_scalar(field.type_) }} elem : m_{{ field.name }}) {
{%       if not type_helper.is_scalar(field.type_) %}
            retval += elem.size();
{%       else %}
            retval += sizeof(elem);
{%       endif %}
        }
{%     else %}
        retval += m_{{ field.name }}.size();
{%     endif %}
{%   endif %}
{% endfor %}
        return retval;
    }

    void pack_into(uint8_t* buffer_ptr) const
    {
{% for field in fields if field.enabled and field.packed_tag.packed_int is none %}
{%   if field.is_list %}
        for (const auto{{ '&' if not type_helper.is_scalar(field.type_) }} elem : m_{{ field.name }}) {
{%     if type_helper.is_scalar(field.type_) %}
            static_assert(std::is_trivially_copyable_v<decltype(elem)>);
            std::memcpy(buffer_ptr, &elem, sizeof(elem));
            buffer_ptr += sizeof(elem);
{%     else %}
            elem.pack_into(buffer_ptr);
            buffer_ptr += elem.size();
{%     endif %}
        }
{%   elif field.is_fixed_point %}
        auto {{ field.name}}_value = vrtgen::to_be(vrtgen::fixed_to_int{{ type_helper.fixed_template(field) }}(m_{{ field.name }}));
        std::memcpy(buffer_ptr, &{{ field.name}}_value, sizeof({{ field.name}}_value));
{%     if not loop.last %}
        buffer_ptr += sizeof({{ field.name}}_value);
{%     endif %}
{%   elif type_helper.is_scalar(field) %}
        std::memcpy(buffer_ptr, &m_{{ field.name }}, sizeof(m_{{ field.name }}));
{%     if not loop.last %}
        buffer_ptr += sizeof(m_{{ field.name }});
{%     endif %}
{%   else %}
        m_{{ field.name }}.pack_into(buffer_ptr);
{%     if not loop.last %}
        buffer_ptr += m_{{ field.name }}.size();
{%     endif %}
{%   endif %}
{% endfor %}
    }

    void unpack_from(const uint8_t* data)
    {
        auto* ptr = data;
{% for field in fields if field.enabled and field.packed_tag.packed_int is none %}
{%   if field.is_list %}
        m_{{ field.name}}.resize({{ field.linked_size.getter }}());
        for (size_t i=0; i<m_{{ field.name }}.size(); ++i) {
{%     if type_helper.is_scalar(field.type_) %}
            std::memcpy(m_{{ field.name }}.data() + i, ptr, sizeof(m_{{ field.name }}[i]));
            ptr += sizeof(m_{{ field.name }}[i]);
{%     else %}
            m_{{ field.name}}[i].unpack_from(ptr);
            ptr += m_{{ field.name }}[i].size();
{%     endif %}
        }
{%   elif field.is_fixed_point %}
        int{{ field.bits }}_t {{ field.name}}_value{ 0 };
        std::memcpy(&{{ field.name}}_value, ptr, sizeof({{ field.name}}_value));
        m_{{ field.name }} = vrtgen::fixed_to_fp{{ type_helper.fixed_template(field) }}(vrtgen::from_be({{ field.name}}_value));
{%     if not loop.last %}
        ptr += sizeof({{ field.name }}_value);
{%     endif %}
{%  elif type_helper.is_scalar(field) %}
        std::memcpy(&m_{{ field.name }}, ptr, sizeof(m_{{ field.name }}));
{%     if not loop.last %}
        ptr += sizeof(m_{{ field.name }});
{%     endif %}
{%   else %}
        m_{{ field.name }}.unpack_from(ptr);
{%     if not loop.last %}
        ptr += m_{{ field.name }}.size();
{%     endif %}
{%   endif %}
{% endfor %}
    }

private:
{% for field in fields if field.enabled and not field.is_packed_type %}
{%     if loop.first %}
    /*
{%     endif %}
     * {{ field.name }} {{ field.packed_tag.field_word }}/{{ field.packed_tag.position }} 
{%     if loop.last %}
     */
{%     endif %}
{% endfor %}
{% for field in fields if field.enabled %}
{%     set tag = field.packed_tag %}
{%     if tag.packed_int is not none %}
{%         set packed_int = class.packed_fields[tag.packed_int] %}
    using {{ field.name }}_tag = vrtgen::packed_tag<{{ type_helper.value_type(field) }},{{ tag.position % packed_int.bits }},{{ tag.bits }}{{ ',detail::'+field.converter if field.converter }}>;
{%     else %}
{%         if field.value %}
    {{ type_helper.member_type(field) }} m_{{ field.name }}{ {{ field.value }}{{ 'u' if not field.signed }} };
{%         else %}
    {{ type_helper.member_type(field) }} m_{{ field.name }};
{%         endif %}
{%     endif %}
{% endfor %}

}; // end class {{ class.type_ }}

{%- endmacro %}