/*#
 * Copyright (C) 2021 Geon Technologies, LLC
 *
 * This file is part of vrtgen.
 *
 * vrtgen is free software: you can redistribute it and/or modify it under the
 * terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation, either version 3 of the License, or (at your option)
 * any later version.
 *
 * vrtgen is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for
 * more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see http://www.gnu.org/licenses/.
#*/

{%- import "macros/types/basic.jinja2" as basic %}

{%- macro wif_functions(wif, type_helper) %}
{{ basic.const_ref_getter(wif, type_helper) | trim }}

/**
 * @brief Check if {{ wif.name }} contains warning indicators
 * @return true if {{ wif.name }} contains warning indicators, otherwise false
 */
bool has_{{ wif.name }}_warnings() const noexcept
{
{% for field in wif.fields if field.enabled %}
    {{ 'return ' if loop.first else '       ' }}has_{{ field.name }}_warnings(){{ ' ||' if not loop.last else ';' }}
{% endfor %}
}

{% for field in wif.fields if field.enabled %}
/**
 * @brief Check if optional {{ field.name }}_warnings contains a value
 * @return true if {{ field.name }}_warnings contains a value, otherwise false
 */
constexpr bool has_{{ field.name }}_warnings() const noexcept
{
    return m_{{ field.name }}_warnings.has_value();
}

/**
 * @brief If {{ field.name }}_warnings contains a value, destroy it
 */
void reset_{{ field.name }}_warnings() noexcept
{
    return m_{{ field.name }}_warnings.reset();
}

/**
 * @brief Get a reference to {{ field.name }}_warnings
 * @return A reference to {{ field.name }}_warnings
 * @exception std::bad_optional_access if {{ field.name }}_warnings does not contain a value
 */
constexpr {{ type_helper.value_type(field) }}& {{ field.getter }}_warnings()
{
    return m_{{ field.name }}_warnings.value();
}

/**
 * @brief Get a const reference to {{ field.name }}_warnings
 * @return A const reference to {{ field.name }}_warnings
 * @exception std::bad_optional_access if {{ field.name }}_warnings does not contain a value
 */
constexpr const {{ type_helper.value_type(field) }}& {{ field.getter }}_warnings() const
{
    return m_{{ field.name }}_warnings.value();
}

/**
 * @brief Set the value of {{ field.name }}_warnings
 * @param value Value to assign to {{ field.name }}_warnings
 */
void {{ field.setter }}_warnings(const {{ type_helper.value_type(field) }}& value)
{
    m_{{ field.name }}_warnings = value;
}

{% endfor %}
{% endmacro %}

{%- macro eif_functions(eif, type_helper) %}
{{ basic.const_ref_getter(eif, type_helper) | trim }}

/**
 * @brief Check if {{ eif.name }} contains error indicators
 * @return true if {{ eif.name }} contains error indicators, otherwise false
 */
bool has_{{ eif.name }}_errors() const
{
{% for field in eif.fields if field.enabled %}
    {{ 'return ' if loop.first else '       ' }}has_{{ field.name }}_errors(){{ ' ||' if not loop.last else ';' }}
{% endfor %}
}

{% for field in eif.fields if field.enabled %}
/**
 * @brief Check if optional {{ field.name }}_errors contains a value
 * @return true if {{ field.name }}_errors contains a value, otherwise false
 */
constexpr bool has_{{ field.name }}_errors() const noexcept
{
    return m_{{ field.name }}_errors.has_value();
}

/**
 * @brief If {{ field.name }}_errors contains a value, destroy it
 */
void reset_{{ field.name }}_errors() noexcept
{
    return m_{{ field.name }}_errors.reset();
}

/**
 * @brief Get a reference to {{ field.name }}_errors
 * @return A reference to {{ field.name }}_errors
 * @exception std::bad_optional_access if {{ field.name }}_errors does not contain a value
 */
constexpr {{ type_helper.value_type(field) }}& {{ field.getter }}_errors()
{
    return m_{{ field.name }}_errors.value();
}

/**
 * @brief Get a const reference to {{ field.name }}_errors
 * @return A const reference to {{ field.name }}_errors
 * @exception std::bad_optional_access if {{ field.name }}_errors does not contain a value
 */
constexpr const {{ type_helper.value_type(field) }}& {{ field.getter }}_errors() const
{
    return m_{{ field.name }}_errors.value();
}

/**
 * @brief Set the value of {{ field.name }}_errors
 * @param value Value to assign to {{ field.name }}_errors
 */
void {{ field.setter }}_errors(const {{ type_helper.value_type(field) }}& value)
{
    m_{{ field.name }}_errors = value;
}

{% endfor %}
{% endmacro %}

{%- macro wif_members(wif, type_helper) %}
{{ basic.member(wif, type_helper) | trim }}
{% for field in wif.fields if field.enabled %}
std::optional<{{ type_helper.member_type(field) }}> m_{{ field.name }}_warnings;
{% endfor %}
{% endmacro %}

{%- macro eif_members(eif, type_helper) %}
{{ basic.member(eif, type_helper) | trim }}
{% for field in eif.fields if field.enabled %}
std::optional<{{ type_helper.member_type(field) }}> m_{{ field.name }}_errors;
{% endfor %}
{% endmacro %}

{%- macro public_functions(packet, type_helper) %}
{% if packet.wif0.enabled and packet.warnings_enabled %}
{{ wif_functions(packet.wif0, type_helper) | trim }}

{% endif %}
{% if packet.wif1.enabled and packet.warnings_enabled %}
{{ wif_functions(packet.wif1, type_helper) | trim }}

{% endif %}
{% if packet.wif2.enabled and packet.warnings_enabled %}
{{ wif_functions(packet.wif2, type_helper) | trim }}

{% endif %}
{% if packet.eif0.enabled and packet.errors_enabled %}
{{ eif_functions(packet.eif0, type_helper) | trim }}

{% endif %}
{% if packet.eif1.enabled and packet.errors_enabled %}
{{ eif_functions(packet.eif1, type_helper) | trim }}

{% endif %}
{% if packet.eif2.enabled and packet.errors_enabled %}
{{ eif_functions(packet.eif2, type_helper) | trim }}

{% endif %}
{% endmacro %}

{%- macro members(packet, type_helper) %}
{% if packet.wif0.enabled and packet.warnings_enabled %}
{{ wif_members(packet.wif0, type_helper) | trim }}
{% endif %}
{% if packet.wif1.enabled and packet.warnings_enabled %}
{{ wif_members(packet.wif1, type_helper) | trim }}
{% endif %}
{% if packet.wif2.enabled and packet.warnings_enabled %}
{{ wif_members(packet.wif2, type_helper) | trim }}
{% endif %}
{% if packet.eif0.enabled and packet.errors_enabled %}
{{ eif_members(packet.eif0, type_helper) | trim }}
{% endif %}
{% if packet.eif1.enabled and packet.errors_enabled %}
{{ eif_members(packet.eif1, type_helper) | trim }}
{% endif %}
{% if packet.eif2.enabled and packet.errors_enabled %}
{{ eif_members(packet.eif2, type_helper) | trim }}
{% endif %}
{% endmacro %}