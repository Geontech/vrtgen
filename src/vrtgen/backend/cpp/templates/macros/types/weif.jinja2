/*#
 * Copyright (C) 2023 Geon Technologies, LLC
 *
 * This file is part of vrtgen.
 *
 * vrtgen is free software: you can redistribute it and/or modify it under the
 * terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation, either version 3 of the License, or (at your option)
 * any later version.
 *
 * vrtgen is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for
 * more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see http://www.gnu.org/licenses/.
#*/
{%- import "macros/function_defs/common.jinja2" as common %}

{%- macro weif_functions(packet, packet_name, weif, is_warning, type_helper) %}
{{ common.const_ref_getter(packet_name, weif, type_helper) | trim }}

auto {{ packet_name }}::reset_{{ weif.name }}() -> void
{
{% if weif.name == packet.wif0.name %}
{%   if packet.wif1.enabled %}
    reset_{{ packet.wif1.name }}();
{%   endif %}
{%   if packet.wif2.enabled %}
    reset_{{ packet.wif2.name }}();
{%   endif %}
{% elif weif.name == packet.eif0.name %}
{%   if packet.eif1.enabled %}
    reset_{{ packet.eif1.name }}();
{%   endif %}
{%   if packet.eif2.enabled %}
    reset_{{ packet.eif2.name }}();
{%   endif %}
{% endif %}
    if (m_{{ weif.name }}.has_value()) {
{% for field in weif.fields if field.enabled %}
        if (m_{{ weif.name }}->{{ field.name }}()) {
            reset_{{ field.name }}{{ '_warnings' if is_warning else '_errors' }}();
        }
{% endfor %}
        const auto pos{ m_positions.at("{{ weif.name }}") };
        m_data.erase(m_data.begin() + pos, m_data.begin() + pos + m_{{ weif.name }}->size());
        m_{{ weif.name }}.reset();
{% if not weif.name == packet.wif0.name and is_warning %}
        if (m_{{ packet.wif0.name }}.has_value()) {
{%   if weif.name == packet.wif1.name %}
            m_{{ packet.wif0.name }}->wif1_enable(false);
{%   elif weif.name == packet.wif1.name %}
            m_{{ packet.wif0.name }}->wif2_enable(false);
{%   endif %}
        }
{% else %}
        if (m_{{ packet.eif0.name }}.has_value()) {
{%   if weif.name == packet.eif1.name %}
            m_{{ packet.eif0.name }}->eif1_enable(false);
{%   elif weif.name == packet.eif1.name %}
            m_{{ packet.eif0.name }}->eif2_enable(false);
{%   endif %}
        }
{% endif %}
        update_positions();
        update_packet_size();
    }
}

{% for field in weif.fields if field.enabled %}
{%   set func_name = field.name + ('_warnings' if is_warning else '_errors') %}
/**
 * @brief Returns the value of {{ func_name }}
 * @return {{ func_name }}'s value
 */
auto {{ packet_name }}::{{ func_name }}() -> std::optional<{{ type_helper.member_type(field) }}>&
{
    return m_{{ func_name }};
}

/**
 * @brief Sets the value of {{ func_name }}
 * @param value Value to assign to {{ func_name }}
 */
auto {{ packet_name }}::{{ func_name }}(const {{ type_helper.member_type(field) }}& value) -> void
{
    m_{{ func_name }} = value;
    if (!m_{{ weif.name }}.has_value()) {
        m_{{ weif.name }} = {{ type_helper.member_type(weif) }}{};
        m_data.insert(m_data.begin() + m_positions.at("{{ weif.name }}"), m_{{ weif.name }}->size(), 0);
        update_positions();
        update_packet_size();
    }
    if (!m_{{ weif.name }}->{{ field.name }}()) {
        m_data.insert(m_data.begin() + m_positions.at("{{ func_name }}"), m_{{ func_name }}->size(), 0);
        m_{{ weif.name }}->{{ field.name }}(true);
        m_{{ weif.name }}->pack_into(m_data.data() + m_positions.at("{{ weif.name }}"));
        update_positions();
        update_packet_size();
    }
    m_{{ func_name }}->pack_into(m_data.data() + m_positions.at("{{ func_name }}"));
{% if is_warning %}
    m_{{ packet.cam.name }}.ack_w(true);
{% else %}
    m_{{ packet.cam.name }}.ack_er(true);
{% endif %}
    m_cam.pack_into(m_data.data() + m_positions.at("{{ packet.cam.name }}"));
}

/**
 * @brief If {{ func_name }} contains a value, destroy it
 */
auto {{ packet_name }}::reset_{{ func_name }}() -> void
{
    m_{{ weif.name }}->{{ field.name }}(false);
    const auto pos{ m_positions.at("{{ func_name }}") };
    m_data.erase(m_data.begin() + pos, m_data.begin() + pos + m_{{ func_name }}->size());
    m_{{ func_name }}.reset();
    update_positions();
    update_packet_size();
}

{% endfor %}
{% endmacro %}

{%- macro wif_members(wif, type_helper) %}
{{ basic.member(wif, type_helper) | trim }}
{% for field in wif.fields if field.enabled %}
std::optional<{{ type_helper.member_type(field) }}> m_{{ field.name }}_warnings;
{% endfor %}
{% endmacro %}

{%- macro eif_members(eif, type_helper) %}
{{ basic.member(eif, type_helper) | trim }}
{% for field in eif.fields if field.enabled %}
std::optional<{{ type_helper.member_type(field) }}> m_{{ field.name }}_errors;
{% endfor %}
{% endmacro %}

{%- macro public_functions(packet, type_helper) %}
{% if packet.wif0.enabled and packet.warnings_enabled %}
{{ wif_functions(packet.wif0, type_helper) | trim }}

{% endif %}
{% if packet.wif1.enabled and packet.warnings_enabled %}
{{ wif_functions(packet.wif1, type_helper) | trim }}

{% endif %}
{% if packet.wif2.enabled and packet.warnings_enabled %}
{{ wif_functions(packet.wif2, type_helper) | trim }}

{% endif %}
{% if packet.eif0.enabled and packet.errors_enabled %}
{{ eif_functions(packet.eif0, type_helper) | trim }}

{% endif %}
{% if packet.eif1.enabled and packet.errors_enabled %}
{{ eif_functions(packet.eif1, type_helper) | trim }}

{% endif %}
{% if packet.eif2.enabled and packet.errors_enabled %}
{{ eif_functions(packet.eif2, type_helper) | trim }}

{% endif %}
{% endmacro %}

{%- macro members(packet, type_helper) %}
{% if packet.wif0.enabled and packet.warnings_enabled %}
{{ wif_members(packet.wif0, type_helper) | trim }}
{% endif %}
{% if packet.wif1.enabled and packet.warnings_enabled %}
{{ wif_members(packet.wif1, type_helper) | trim }}
{% endif %}
{% if packet.wif2.enabled and packet.warnings_enabled %}
{{ wif_members(packet.wif2, type_helper) | trim }}
{% endif %}
{% if packet.eif0.enabled and packet.errors_enabled %}
{{ eif_members(packet.eif0, type_helper) | trim }}
{% endif %}
{% if packet.eif1.enabled and packet.errors_enabled %}
{{ eif_members(packet.eif1, type_helper) | trim }}
{% endif %}
{% if packet.eif2.enabled and packet.errors_enabled %}
{{ eif_members(packet.eif2, type_helper) | trim }}
{% endif %}
{% endmacro %}