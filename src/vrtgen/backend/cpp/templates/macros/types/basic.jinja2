/*#
 * Copyright (C) 2021 Geon Technologies, LLC
 *
 * This file is part of vrtgen.
 *
 * vrtgen is free software: you can redistribute it and/or modify it under the
 * terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation, either version 3 of the License, or (at your option)
 * any later version.
 *
 * vrtgen is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for
 * more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see http://www.gnu.org/licenses/.
#*/

{%- macro literal_value(field, type_helper) %}
{% if type_helper.literal_value(field) is not none %}
{ {{ type_helper.literal_value(field) }} }
{% endif %}
{% endmacro %}

{%- macro member(field, type_helper) %}
{%   if field.is_optional %}
std::optional<{{ type_helper.member_type(field) }}> _{{ field.name }};
{%   else %}
{{ type_helper.member_type(field) }} _{{ field.name }}{{ literal_value(field, type_helper) | trim }};
{%   endif %}
{% endmacro %}

{%- macro optional_functions(field, type_helper, cif, cif7) %}
{% if not field.is_optional %}
/**
 * @brief Check if {{ field.name }} contains a value
 * @return true, {{ field.name }} is a required field
 */
constexpr bool has_{{ field.name }}() const noexcept
{
    return true; // required
}
{% else %}
/**
 * @brief Check if optional {{ field.name }} contains a value
 * @return true if {{ field.name }} contains a value, otherwise false
 */
constexpr bool has_{{ field.name }}() const noexcept
{
    return _{{ field.name }}.has_value();
}

/**
 * @brief If {{ field.name }} contains a value, destroy it
 */
void reset_{{ field.name }}() noexcept
{
{% if cif is not none %}
    _{{ field.name }}.reset();
{% else %}
    return _{{ field.name }}.reset();
{% endif %}
}
{% endif %}
{% if cif7 is defined and cif7 is not none %}
{%   if cif7.enabled and not field.indicator_only %}
{%      if not field.is_optional %}
/**
 * @brief Check if {{ field.name }}_attributes contains a value
 * @return true, {{ field.name }}_attributes is a required field
 */
constexpr bool has_{{ field.name }}_attributes() const noexcept
{
    return true; // required
}
{%      else %}
/**
 * @brief Check if optional {{ field.name }}_attributes contains a value
 * @return true if {{ field.name }}_attributes contains a value, otherwise false
 */
constexpr bool has_{{ field.name }}_attributes() const noexcept
{
    return _{{ field.name }}_attributes.has_value();
}

/**
 * @brief If {{ field.name }}_attributes contains a value, destroy it
 */
void reset_{{ field.name }}_attributes() noexcept
{
{% if cif is not none %}
    _{{ field.name }}_attributes.reset();
{% else %}
    return _{{ field.name }}_attributes.reset();
{% endif %}
}
{%      endif %}
{%   endif %}
{% endif %}
{% endmacro %}

{%- macro ref_getter(field, type_helper, cif7, packet_namespace) %}
{% set field_name = field.name %}
{% set field_getter = field.getter %}
{% set field_type = type_helper.member_type(field) %}
{% if cif7 is defined and cif7 is not none %}
{%   if cif7.enabled and not field.indicator_only %}
{% set field_name = field.name + "_attributes" %}
{% set field_getter = field.getter + "_attributes" %}
{% set field_type = type_helper.member_type(cif7.attributes) + "<" + type_helper.value_type(field.type_) + ">" %}
{%   endif %}
{% endif %}
/**
 * @brief Returns a reference to {{ field.name }}
 * @return A reference to {{ field.name }}
{% if field.is_optional %}
 * @exception std::bad_optional_access if {{ field_name }} does not contain a value
{% endif %}
 */
constexpr {{ field_type }}& {{ field_getter }}(){{ ' noexcept' if not field.is_optional }}
{
    return _{{ field_name }}{{ '.value()' if field.is_optional }}{{ '.get()' if type_helper.requires_get_set(field) }};
}
{% endmacro %}

{%- macro const_ref_getter(field, type_helper, cif7, packet_namespace) %}
{% set field_name = field.name %}
{% set field_getter = field.getter %}
{% set field_type = type_helper.member_type(field) %}
{% if cif7 is defined and cif7 is not none %}
{%   if cif7.enabled and not field.indicator_only %}
{% set field_name = field.name + "_attributes" %}
{% set field_getter = field.getter + "_attributes" %}
{% set field_type = type_helper.member_type(cif7.attributes) + "<" + type_helper.value_type(field.type_) + ">" %}
{% endif %}
{% endif %}
/**
 * @brief Returns a const reference to {{ field_name }}
 * @return A const reference to {{ field_name }}
{% if field.is_optional %}
 * @exception std::bad_optional_access if {{ field_name }} does not contain a value
{% endif %}
 */
constexpr const {{ field_type }}& {{ field_getter }}() const{{ ' noexcept' if not field.is_optional }}
{
    return _{{ field_name }}{{ '.value()' if field.is_optional }}{{ '.get()' if type_helper.requires_get_set(field) }};
}
{% endmacro %}

{%- macro value_getter(field, type_helper, cif7, packet_namespace) %}
{% set field_name = field.name %}
{% set field_getter = field.getter %}
{% set field_type = type_helper.value_type(field) %}
{% if cif7 is defined and cif7 is not none %}
{%   if cif7.enabled and not field.indicator_only %}
{% set field_name = field.name + "_attributes" %}
{% set field_getter = field.getter + "_attributes" %}
{% set field_type = type_helper.member_type(cif7.attributes) + "<" + type_helper.value_type(field.type_) + ">" %}
{%   endif %}
{% endif %}
/**
 * @brief Returns the value of {{ field_name }}
 * @return {{ field_name }}'s value
{% if field.is_optional %}
 * @exception std::bad_optional_access if {{ field_name }} does not contain a value
{% endif %}
 */
{{ field_type }} {{ field_getter }}() const{{ ' noexcept' if not field.is_optional }}
{
{% if cif7 is defined and cif7 is not none %}
{%   if cif7.enabled and not field.indicator_only %}
    return _{{ field_name }}{{ '.value()' if field.is_optional }}{{ '.get()' if type_helper.requires_get_set(field) }};
{%   endif %}
{% elif field.is_fixed_point or field.type_.is_fixed_point %}
    return vrtgen::fixed::to_fp{{ type_helper.fixed_template(field) }}(vrtgen::swap::from_be(_{{ field_name }}{{ '.value()' if field.is_optional }}));
{% elif field.is_integer_type or field.type_.is_integer_type %}
    return vrtgen::swap::from_be(_{{ field_name }}{{ '.value()' if field.is_optional }});
{% else %}
    return _{{ field_name }}{{ '.value()' if field.is_optional }}{{ '.get()' if type_helper.requires_get_set(field) }};
{% endif %}
}
{% endmacro %}

{%- macro getters(field, type_helper, cif7, packet_namespace) %}
{% if not type_helper.is_scalar(field) %}
{{ ref_getter(field, type_helper) | trim }}

{{ const_ref_getter(field, type_helper) | trim }}
{% else %}
{{ value_getter(field, type_helper) | trim }}
{% endif %}
{% if cif7 is defined and cif7 is not none %}
{%   if cif7.enabled and not field.indicator_only %}
{% if not type_helper.is_scalar(field) %}
{{ ref_getter(field, type_helper, cif7, packet_namespace) | trim }}

{{ const_ref_getter(field, type_helper, cif7, packet_namespace) | trim }}
{% else %}
{{ value_getter(field, type_helper, cif7, packet_namespace) | trim }}
{% endif %}
{%   endif %}
{% endif %}
{% endmacro %}

{%- macro setters(field, type_helper, cif, cif7, packet_namespace) %}
/**
 * @brief Set the value of {{ field.name }}
 * @param value Value to assign to {{ field.name }}
 */
{% if not type_helper.is_scalar(field) %}
void {{ field.setter }}(const {{ type_helper.value_type(field) }}& value)
{% else %}
void {{ field.setter }}({{ type_helper.value_type(field) }} value)
{% endif %}
{
{% if type_helper.requires_get_set(field)  %}
{%   if field.is_optional %}
    if (!_{{ field.name }}.has_value()) {
        _{{ field.name }} = decltype(_{{ field.name }})::value_type{};
    }
{%   endif %}
    _{{ field.name }}{{ '.value()' if field.is_optional }}.set(value);
{% elif field.is_fixed_point %}
    _{{ field.name }} = vrtgen::swap::to_be(vrtgen::fixed::to_int{{ type_helper.fixed_template(field) }}(value));
{% elif field.type_.is_fixed_point %}
    _{{ field.name }} = vrtgen::swap::to_be(vrtgen::fixed::to_int{{ type_helper.fixed_template(field.type_) }}(value));
{% elif field.is_integer_type or field.type_.is_integer_type %}
    _{{ field.name }} = vrtgen::swap::to_be(value);
{% else %}
    _{{ field.name }} = value;
{% endif %}
}
{% if cif7 is defined and cif7 is not none %}
{%   if cif7.enabled and not field.indicator_only %}
/**
 * @brief Set the value of {{ field.name }}
 * @param value Value to assign to {{ field.name }}
 */
{% if not type_helper.is_scalar(field) %}
void {{ field.setter }}_attributes(const {{ packet_namespace }}{{ type_helper.value_type(cif7.attributes) }}<{{ type_helper.value_type(field) }}>& value)
{% else %}
void {{ field.setter }}_attributes({{ packet_namespace }}{{ type_helper.value_type(cif7.attributes) }}<{{ type_helper.value_type(field) }}> value)
{% endif %}
{
    _{{ field.name }}_attributes = value;
}
{%   endif %}
{% endif %}
{% endmacro %}

{%- macro getters_and_setters(field, type_helper, cif, cif7, packet_namespace) %}
{{ getters(field, type_helper, cif7, packet_namespace ) | trim }}

{{ setters(field, type_helper, cif, cif7, packet_namespace) | trim }}
{% endmacro %}