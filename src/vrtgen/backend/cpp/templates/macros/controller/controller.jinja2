/*#
 * Copyright (C) 2023 Geon Technologies, LLC
 *
 * This file is part of vrtgen.
 *
 * vrtgen is free software: you can redistribute it and/or modify it under the
 * terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation, either version 3 of the License, or (at your option)
 * any later version.
 *
 * vrtgen is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for
 * more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see http://www.gnu.org/licenses/.
#*/

{%- macro controller_id_functions(packet, type_helper) %}
/**
 * @brief Return the value of {{ packet.controller_id.name }}
 * @return {{ packet.controller_id.name }}'s value
 */
auto {{ packet.controller_id.name }}() const -> {{ type_helper.value_type(packet.controller_id) }}
{
    return m_{{ packet.controller_id.name }};
}

/**
 * @brief Set the value of {{ packet.controller_id.name }}
 * @param id Value to assign to {{ packet.controller_id.name }}
 */
auto {{ packet.controller_id.name }}({{ type_helper.value_type(packet.controller_id) }} id) -> void
{
    m_{{ packet.controller_id.name }} = id;
}
{% endmacro %}

{%- macro handle_control(packet, type_helper, cmd_socket) %}
/**
 * @brief Send command packet {{ packet.name }}
 * @param packet Packet to be sent
 */
auto send_{{ packet.name | to_snake }}({{ packet.name }}& packet)
{
    packet.message_id(next_message_id());
{% if packet.controller_id.enabled %}
    packet.controller_id(m_{{ packet.controller_id.name }});
{% endif %}
{% set req_list = [] %}
{% set ack_list = [] %}
{% if packet.cam.enabled %}
{%   if packet.cam.req_v.enabled %}
{%     do req_list.append('req_v') %}
{%     do ack_list.append('ack_v') %}
{%   endif %}
{%   if packet.cam.req_x.enabled %}
{%     do req_list.append('req_x') %}
{%     do ack_list.append('ack_x') %}
{%   endif %}
{%   if packet.cam.req_s.enabled %}
{%     do req_list.append('req_s') %}
{%     do ack_list.append('ack_s') %}
{%   endif %}
{% endif %}
{% for ack_t in ack_list %}
{%   if loop.first %}
    auto acks = std::tuple<
{%   endif %}
{%   if ack_t == 'ack_v'%}
        std::optional<{{ packet.name }}AckVX>{{ ',' if not loop.last }}
{%   elif ack_t == 'ack_x' %}
        std::optional<{{ packet.name }}AckVX>{{ ',' if not loop.last }}
{%   elif ack_t == 'ack_s' %}
        std::optional<{{ packet.name }}AckS>
{%   endif %}
{%   if loop.last %}
    >{};
{%   endif %}
{% endfor %}
{% if ack_list %}
{% set ns = namespace(ack_tup_str='') %}
{%   for ack_t in ack_list %}
{%     if not loop.last %}
{%     set ns.ack_tup_str = ns.ack_tup_str + ack_t + ', '%}
{%     else %}
{%     set ns.ack_tup_str = ns.ack_tup_str + ack_t %}
{%     endif %}
{%   endfor %}
    auto& [{{ ns.ack_tup_str }}] = acks;
{% endif %}
{% for req_t in req_list %}
    if (packet.cam().{{ req_t }}()) {
{%   if req_t == 'req_v' %}
        ack_v = {{ packet.name }}AckVX{};
{%   elif req_t == 'req_x' %}
        ack_x = {{ packet.name }}AckVX{};
{%   elif req_t == 'req_s' %}
        ack_s = {{ packet.name }}AckS{};
{%   endif %}
    }
{% endfor %}
{% if cmd_socket == 'nats' %}
    vrtgen::send_packet(m_client, m_controllee_subject, packet, {{ ns.ack_tup_str }});
{% else %}
    vrtgen::send_packet(m_cmd_socket, packet, {{ ns.ack_tup_str }});
{% endif %}
    return acks;
}

{% endmacro %}

{%- macro data_ctxt_rx(packet, type_helper) %}
/**
 * @brief Register a callback listener for incoming {{ packet.name }} packets
 */
void register_{{ packet.name | to_snake }}_listener(const std::function<void({{ packet.name }}&)>&& func)
{
    m_{{ packet.name | to_snake }}_listener = std::move(func);
}
{% endmacro %}

{%- macro data_ctxt_tx(packet, type_helper) %}
/**
 * @brief Send a {{ packet.name }} packet
 */
void send_{{ packet.name | to_snake }}({{ packet.name }}& packet)
{
    auto packed_data = packet.data();
    m_data_ctxt_send_socket.send_to(packed_data.data(), packed_data.size(), m_data_ctxt_send_socket.dst());
}
{% endmacro %}

{%- macro data_ctxt_functions(packet, type_helper) %}
{{ data_ctxt_rx(packet, type_helper) | trim }}

{{ data_ctxt_tx(packet, type_helper) | trim }}

{% endmacro %}

{%- macro define_functions(packets, class_name, type_helper, cmd_socket) %}
{% for packet in packets if (packet.is_control and packet.controller_id.enabled) %}
{%   if loop.first %}
{{ controller_id_functions(packet, type_helper) | trim }}

{%   endif %}
{% endfor %}
{% for packet in packets if packet.is_control %}
{{ handle_control(packet, type_helper, cmd_socket) | trim }}

{% endfor %}
{% for packet in packets if (packet.is_data or packet.is_context) %}
{{ data_ctxt_functions(packet, type_helper) | trim }}

{%   if loop.last %}
/**
 * @brief Enable the receive thread to listen for data and context packets
 */
void enable_receive()
{
    if (!m_receiving) {
        m_receiving = true;
        m_recv_thread = std::thread(&{{ class_name }}::m_receiver_func, this);
    }
}

/**
 * @brief Disable the receive thread to stop listening for data and context packets
 */
void disable_receive()
{
    m_receiving = false;
    if (m_recv_thread.joinable()) {
        m_recv_thread.join();
    }
}

{%   endif %}
{% endfor %}
{% endmacro %}

{%- macro members(packets, type_helper, cmd_socket) %}
{% for packet in packets if packet.is_control %}
{%   if loop.first %}
{%     if cmd_socket == 'nats' %}
vrtgen::nats::client m_client;
std::string m_controllee_subject;
{%     else %}
cmd_socket_type m_cmd_socket;
{%     endif %}
uint32_t m_message_id{ 1 };
{%   endif %}
{% endfor %}
{% for packet in packets if (packet.is_control and packet.controller_id.enabled) %}
{%   if loop.first %}
{{ type_helper.value_type(packet.controller_id) }} m_{{ packet.controller_id.name }}{{ '{ 0 }' if type_helper.is_scalar(packet.controller_id) }};
{%   endif %}
{% endfor %}
{% for packet in packets if (packet.is_data or packet.is_context) %}
{%   if loop.first %}
data_ctxt_socket_type m_data_ctxt_recv_socket;
data_ctxt_socket_type m_data_ctxt_send_socket;
std::thread m_recv_thread;
std::atomic_bool m_receiving{ false };
{%   endif %}
std::function<void({{ packet.name }}&)> m_{{ packet.name | to_snake }}_listener;
{% endfor %}
{% endmacro %}

{%- macro socket_functions(packets, cmd_socket) %}
{% for packet in packets if packet.is_control %}
{%   if loop.first %}
{%     if cmd_socket == 'nats' %}
/**
 * @brief Set the destination endpoint of the controllee to send control packets to
 * @param subject Desired NATS controllee subjet
 */
auto controllee_endpoint(const std::string& subject) -> void
{
    m_controllee_subject = subject;
}

/**
 * @brief Get the destination endpoint of the controllee to which control packets are sent
 * @return The NATS controllee subject to which control packets are sent
 */
auto controllee_endpoint() const -> const std::string&
{
    return m_controllee_subject;
}

/**
 * @brief Return a reference to the NATS client for sending control packets
 * @return Reference to the NATS client
 */
auto nats_client() -> vrtgen::nats::client&
{
    return m_client;
}
{%     else %}
/**
 * @brief Set the destination endpoint of the controllee to send control packets to
 * @param endpoint Desired controllee endpoint
 */
auto controllee_endpoint(const cmd_endpoint_type& endpoint) -> void
{
{% if cmd_socket == 'tcp' %}
    if (!m_cmd_socket.connect(endpoint)) {
        throw std::runtime_error("Failed to connect command socket to " + endpoint.to_string());
    }
{% else %}
    m_cmd_socket.dst(endpoint);
{% endif %}
}

/**
 * @brief Get the destination endpoint of the controllee to which control packets are sent
 * @return The controllee endpoint to which control packets are sent
 */
auto controllee_endpoint() const -> const cmd_endpoint_type&
{
    return m_cmd_socket.dst();
}

/**
 * @brief Return a reference to the command socket for sending control packets
 * @return Reference to the command socket
 */
auto cmd_socket() -> cmd_socket_type&
{
    return m_cmd_socket;
}
{%     endif %}

{%   endif %}
{% endfor %}
{% for packet in packets if (packet.is_data or packet.is_context) %}
{%   if loop.first %}
/**
 * @brief Bind the data/context recv socket to the desired endpoint for receiving data/context packets
 */
void data_ctxt_src_endpoint(const data_ctxt_endpoint_type& endpoint)
{
    if (!m_data_ctxt_recv_socket.bind(endpoint)) {
        throw std::runtime_error("Failed to bind data/context receive socket to " + endpoint.to_string());
    }
}

/**
 * @brief Get the source endpoint for receiving data and context packets
 */
const data_ctxt_endpoint_type& data_ctxt_src_endpoint() const
{
    return m_data_ctxt_recv_socket.src();
}

/**
 * @brief Return a reference to the data/context recv socket for data/context packets
 */
data_ctxt_socket_type& data_ctxt_recv_socket() noexcept
{
    return m_data_ctxt_recv_socket;
}

/**
 * @brief Set the destination endpoint to send data and context packets to
 */
void data_ctxt_dst_endpoint(const data_ctxt_endpoint_type& endpoint)
{
    m_data_ctxt_send_socket.dst(endpoint);
}

/**
 * @brief Get the destination endpoint to send data and context packets to
 */
const data_ctxt_endpoint_type& data_ctxt_dst_endpoint() const
{
    return m_data_ctxt_send_socket.dst();
}

/**
 * @brief Return a reference to the data/context send socket for sending data/context packets
 */
data_ctxt_socket_type& data_ctxt_send_socket() noexcept
{
    return m_data_ctxt_send_socket;
}
{%   endif %}
{% endfor %}
{% endmacro %}