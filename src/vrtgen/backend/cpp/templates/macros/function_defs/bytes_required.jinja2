/*#
 * Copyright (C) 2023 Geon Technologies, LLC
 *
 * This file is part of vrtgen.
 *
 * vrtgen is free software: you can redistribute it and/or modify it under the
 * terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation, either version 3 of the License, or (at your option)
 * any later version.
 *
 * vrtgen is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for
 * more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see http://www.gnu.org/licenses/.
#*/

{%- macro define_cif_bytes_required(cif, cif7, type_helper) %}

{%- endmacro %}

{%- macro define_field_bytes_required(field, cif7, type_helper ) %}
{% if field.type_.reserved_bits != 0 %}
bytes += sizeof(int{{ field.type_.reserved_bits }}_t); // {{ field.name }} reserved bits
{% endif %}
{% if type_helper.is_scalar(field) %}
bytes += sizeof({{ type_helper.member_type(field) }});{{ ' // ' + field.name if not field.is_optional }}
{% else %}
bytes += m_{{ field.name }}.size();
{% endif %}
{% if cif7.enabled %}
bytes += m_{{ field.name }}_attributes.size();
{% endif %}
{%- endmacro %}

{%- macro bytes_required(packet, type_helper) %}
auto {{ packet.name }}::min_bytes() const -> std::size_t
{
    std::size_t bytes{};
    bytes += m_{{ packet.header.name }}.size();
{% if packet.stream_id.enabled %}
{%   if packet.stream_id.user_defined %}
    bytes += m_{{ packet.stream_id.name }}.size();
{%   else %}
    bytes += sizeof({{ type_helper.member_type(packet.stream_id) }}); // {{ packet.stream_id.name }}
{%   endif %}
{% endif %}
{% if packet.class_id.enabled %}
    bytes += m_{{ packet.class_id.name }}.size();
{% endif %}
{% if packet.timestamp.enabled %}
{%     if packet.timestamp.integer.enabled %}
    bytes += sizeof({{ type_helper.value_type(packet.timestamp.integer) }}); // {{ packet.timestamp.integer.name }}
{%     endif %}
{%     if packet.timestamp.fractional.enabled %}
    bytes += sizeof({{ type_helper.value_type(packet.timestamp.fractional) }}); // {{ packet.timestamp.fractional.name }}
{%     endif %}
{% endif %}
{% if packet.cam.enabled %}
    bytes += m_{{ packet.cam.name }}.size();
{% endif %}
{% if packet.message_id.enabled %}
    bytes += sizeof({{ type_helper.value_type(packet.message_id) }}); // {{ packet.message_id.name }}
{% endif %}
{% if packet.controllee_id.enabled %}
{%   if type_helper.is_scalar(packet.controllee_id) %}
    bytes += sizeof({{ type_helper.member_type(packet.controllee_id) }}); // {{ packet.controllee_id.name }}
{%   else %}
    bytes += m_{{ packet.controllee_id.name }}.size();
{%   endif %}
{% endif %}
{% if packet.controller_id.enabled %}
{%   if type_helper.is_scalar(packet.controller_id) %}
    bytes += sizeof({{ type_helper.value_type(packet.controller_id) }}); // {{ packet.controller_id.name }}
{%   else %}
    bytes += m_{{ packet.controller_id.name }}.size();
{%   endif %}
{% endif %}
{% if packet.cif0.enabled %}
    bytes += m_{{ packet.cif0.name }}.size();
{%   if packet.requires_cif_functions %}
{%     for field in packet.cif0.fields if field.enabled and not field.is_optional and not field.indicator_only %}
    {{ define_field_bytes_required(field, packet.cif7, type_helper ) | indent(4) | trim }}
{%     endfor %}
{%   endif %}
{% endif %}
{% if packet.cif1.enabled and not packet.cif1.is_optional %}
    bytes += m_{{ packet.cif1.name }}.size();
{%   if packet.requires_cif_functions %}
{%     for field in packet.cif1.fields if field.enabled and not field.is_optional and not field.indicator_only %}
    {{ define_field_bytes_required(field, packet.cif7, type_helper ) | indent(4) | trim }}
{%     endfor %}
{%   endif %}
{% endif %}
{% if packet.cif2.enabled and not packet.cif2.is_optional %}
    bytes += m_{{ packet.cif2.name }}.size();
{%   if packet.requires_cif_functions %}
{%     for field in packet.cif2.fields if field.enabled and not field.is_optional and not field.indicator_only %}
    {{ define_field_bytes_required(field, packet.cif7, type_helper ) | indent(4) | trim }}
{%     endfor %}
{%   endif %}
{% endif %}
{% if packet.cif7.enabled  %}
    bytes += m_{{ packet.cif7.name }}.size();
{% endif %}
{% if packet.is_data and packet.trailer.enabled %}
    bytes += m_{{ packet.trailer.name }}.size();
{% endif %}
    return bytes;
}
{% endmacro %}

{%- macro base_ack_bytes_required(packet, type_helper) %}
auto {{ packet.name }}::min_bytes() const -> std::size_t
{
    std::size_t bytes{};
    bytes += m_{{ packet.header.name }}.size();
{% if packet.stream_id.enabled %}
    bytes += sizeof({{ type_helper.member_type(packet.stream_id) }}); // {{ packet.stream_id.name }}
{% endif %}
{% if packet.class_id.enabled %}
    bytes += m_{{ packet.class_id.name }}.size();
{% endif %}
{% if packet.timestamp.enabled %}
{%     if packet.timestamp.integer.enabled %}
    bytes += sizeof({{ type_helper.value_type(packet.timestamp.integer) }}); // {{ packet.timestamp.integer.name }}
{%     endif %}
{%     if packet.timestamp.fractional.enabled %}
    bytes += sizeof({{ type_helper.value_type(packet.timestamp.fractional) }}); // {{ packet.timestamp.fractional.name }}
{%     endif %}
{% endif %}
{% if packet.cam.enabled %}
    bytes += m_{{ packet.cam.name }}.size();
{% endif %}
{% if packet.message_id.enabled %}
    bytes += sizeof({{ type_helper.value_type(packet.message_id) }}); // {{ packet.message_id.name }}
{% endif %}
{% if packet.controllee_id.enabled %}
{%   if type_helper.is_scalar(packet.controllee_id) %}
    bytes += sizeof({{ type_helper.member_type(packet.controllee_id) }}); // {{ packet.controllee_id.name }}
{%   else %}
    bytes += m_{{ packet.controllee_id.name }}.size();
{%   endif %}
{% endif %}
{% if packet.controller_id.enabled %}
{%   if type_helper.is_scalar(packet.controller_id) %}
    bytes += sizeof({{ type_helper.value_type(packet.controller_id) }}); // {{ packet.controller_id.name }}
{%   else %}
    bytes += m_{{ packet.controller_id.name }}.size();
{%   endif %}
{% endif %}
    return bytes;
}
{% endmacro %}

{%- macro acks_bytes_required(packet, packet_name, type_helper) %}
auto {{ packet_name }}::min_bytes() const -> std::size_t
{
    auto bytes = {{ packet.name }}::min_bytes();
{% if packet.cif0.enabled %}
    bytes += m_{{ packet.cif0.name }}.size();
{%   if packet.requires_cif_functions %}
{%     for field in packet.cif0.fields if field.enabled and not field.is_optional and not field.indicator_only %}
    {{ define_field_bytes_required(field, cif7, type_helper ) | indent(4) | trim }}
{%     endfor %}
{%   endif %}
{% endif %}
{% if packet.cif1.enabled and not packet.cif1.is_optional %}
    bytes += m_{{ packet.cif1.name }}.size();
{%   if packet.requires_cif_functions %}
{%     for field in packet.cif1.fields if field.enabled and not field.is_optional and not field.indicator_only %}
    {{ define_field_bytes_required(field, cif7, type_helper ) | indent(4) | trim }}
{%     endfor %}
{%   endif %}
{% endif %}
{% if packet.cif2.enabled and not packet.cif2.is_optional %}
    bytes += m_{{ packet.cif2.name }}.size();
{%   if packet.requires_cif_functions %}
{%     for field in packet.cif2.fields if field.enabled and not field.is_optional and not field.indicator_only %}
    {{ define_field_bytes_required(field, cif7, type_helper ) | indent(4) | trim }}
{%     endfor %}
{%   endif %}
{% endif %}
    return bytes;
}
{% endmacro %}