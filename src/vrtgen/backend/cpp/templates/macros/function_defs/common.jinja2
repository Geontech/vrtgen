/*#
 * Copyright (C) 2022 Geon Technologies, LLC
 *
 * This file is part of vrtgen.
 *
 * vrtgen is free software: you can redistribute it and/or modify it under the
 * terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation, either version 3 of the License, or (at your option)
 * any later version.
 *
 * vrtgen is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for
 * more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see http://www.gnu.org/licenses/.
#*/

{%- macro optional_functions(packet_name, field, type_helper) %}
bool {{ packet_name }}::has_{{ field.name }}() const noexcept
{
{% if not field.is_optional %}
    return true; // required
}
{% else %}
    return m_{{ field.name }}.has_value();
}

void {{ packet_name }}::reset_{{ field.name }}() noexcept
{
    m_{{ field.name }}.reset();
}
{% endif %}
{% endmacro %}

{%- macro ref_getter(packet_name, field, is_const, type_helper) %}
{% if field.is_optional %}
std::optional<{{ 'const ' if is_const }}{{ type_helper.member_type(field) }}>& {{ packet_name }}::{{ field.name }}(){{ ' const' if is_const }}
{% else %}
{{ 'const ' if is_const }}{{ type_helper.member_type(field) }}& {{ packet_name }}::{{ field.name }}(){{ ' const' if is_const }}
{% endif %}
{
    return m_{{ field.name }};
}
{% endmacro %}

{%- macro const_ref_getter(packet_name, field, type_helper) %}
{{ ref_getter(packet_name, field, true, type_helper) }}
{% endmacro %}

{%- macro value_getter(packet_name, field, type_helper) %}
{{ type_helper.value_type(field) }} {{ packet_name }}::{{ field.name }}() const
{
{% if field.is_fixed_point or field.type_.is_fixed_point %}
    return vrtgen::fixed::to_fp{{ type_helper.fixed_template(field) }}(vrtgen::swap::from_be(m_{{ field.name }}{{ '.value()' if field.is_optional }}));
{% elif field.is_integer_type or field.type_.is_integer_type %}
    return vrtgen::swap::from_be(m_{{ field.name }}{{ '.value()' if field.is_optional }});
{% else %}
    return m_{{ field.name }}{{ '.value()' if field.is_optional }};
{% endif %}
}
{% endmacro %}

{%- macro getters(packet_name, field, type_helper) %}
{% if not type_helper.is_scalar(field) %}
{{ ref_getter(packet_name, field, false, type_helper) | trim }}
{% else %}
{{ value_getter(packet_name, field, type_helper) | trim }}
{% endif %}
{% endmacro %}

{%- macro setters(packet_name, field, type_helper) %}
void {{ packet_name }}::{{ field.name }}(const {{ type_helper.value_type(field) }}{{ '&' if not type_helper.is_scalar(field) }} value)
{
{% if field.is_fixed_point %}
    m_{{ field.name }} = vrtgen::swap::to_be(vrtgen::fixed::to_int{{ type_helper.fixed_template(field) }}(value));
{% elif field.is_integer_type %}
    m_{{ field.name }} = vrtgen::swap::to_be(value);
{% else %}
    m_{{ field.name }} = value;
{% endif %}
}
{% endmacro %}

{%- macro getters_and_setters(packet_name, field, type_helper) %}
{{ getters(packet_name, field, type_helper) | trim }}

{{ setters(packet_name, field, type_helper) | trim }}
{% endmacro %}
