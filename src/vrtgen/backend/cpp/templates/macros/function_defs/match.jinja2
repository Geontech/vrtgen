/*#
 * Copyright (C) 2022 Geon Technologies, LLC
 *
 * This file is part of vrtgen.
 *
 * vrtgen is free software: you can redistribute it and/or modify it under the
 * terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation, either version 3 of the License, or (at your option)
 * any later version.
 *
 * vrtgen is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for
 * more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see http://www.gnu.org/licenses/.
#*/

{%- macro match(packet, type_helper) %}
std::optional<std::string> {{ packet.name }}::match(std::span<const uint8_t> data)
{
    vrtgen::OverlayBuffer buffer(data.data(), data.size());
    const auto header = buffer.next<{{ type_helper.value_type(packet.header) }}>();
{% for field in packet.header.fields %}
{%   if field.name == 'packet_count' or field.name == 'packet_size' %}
{%     continue %}
{%   endif %}
    if (header.{{ field.name }}() != {{ type_helper.literal_value(field) }}) {
        std::ostringstream msg;
        msg << "Failed to match header field {{ field.name }}."
{%   if field.is_enum %}
            << " Expected " << std::to_string(static_cast<int>({{ type_helper.literal_value(field) }}))
            << " but got " << std::to_string(static_cast<int>(header.{{ field.name }}()));
{%   else %}
            << " Expected " << std::to_string({{ type_helper.literal_value(field) }})
            << " but got " << std::to_string(header.{{ field.name }}());
{%   endif %}
        return { msg.str() };
    }
{% endfor %}
{% if packet.stream_id.enabled and (packet.class_id.enabled or packet.cam.enabled) %}
    buffer.next<{{ type_helper.value_type(packet.stream_id) }}>(); // stream id
{% endif %}
{% if packet.class_id.enabled %}
    const auto class_id = buffer.next<{{ type_helper.value_type(packet.class_id) }}>();
{%     for field in packet.class_id.fields if not field.is_packed_type %}
    if (class_id.{{ field.name }}() != {{ type_helper.literal_value(field) }}) {
        std::ostringstream msg;
        msg << "Failed to match header field {{ field.name }}."
{%   if field.is_enum %}
            << " Expected " << std::to_string(static_cast<int>({{ type_helper.literal_value(field) }}))
            << " but got " << std::to_string(static_cast<int>(class_id.{{ field.name }}()));
{%   else %}
            << " Expected " << std::to_string({{ type_helper.literal_value(field) }})
            << " but got " << std::to_string(class_id.{{ field.name }}());
{%   endif %}
        return { msg.str() };
    }
{%     endfor %}
{% endif %}
{% if packet.timestamp.enabled and packet.cam.enabled %}
{%   if packet.timestamp.integer.enabled %}
    buffer.next<{{ type_helper.value_type(packet.timestamp.integer) }}>(); // integer timestamp
{%   endif %}
{%   if packet.timestamp.fractional.enabled %}
    buffer.next<{{ type_helper.value_type(packet.timestamp.fractional) }}>(); // fractional timestamp
{%   endif %}
{% endif %}
{% if packet.cam.enabled %}
    const auto cam = buffer.next<{{ type_helper.value_type(packet.cam) }}>();
{%   for field in packet.cam.fields if field.enabled %}
{%     if (field.name == 'ack_w' or field.name == 'ack_er') %}
{%       continue %}
{%     endif %}
    if (cam.{{ field.name }}() != {{ type_helper.literal_value(field) }}) {
        std::ostringstream msg;
        msg << "Failed to match header field {{ field.name }}."
{%   if field.is_enum %}
            << " Expected " << std::to_string(static_cast<int>({{ type_helper.literal_value(field) }}))
            << " but got " << std::to_string(static_cast<int>(cam.{{ field.name }}()));
{%   else %}
            << " Expected " << std::to_string({{ type_helper.literal_value(field) }})
            << " but got " << std::to_string(cam.{{ field.name }}());
{%   endif %}
        return { msg.str() };
    }
{%   endfor %}
{% endif %}
    return {};
}
{% endmacro %}