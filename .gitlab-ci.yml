variables:
    IMAGE_TAG: $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA

stages:
    - build
    - test
    - package
    - deploy

# Build Stage Jobs
build:rockylinux:8:
    image: docker:latest
    stage: build
    interruptible: true
    tags:
      - Docker
    before_script:
      - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    script:
      - docker build --pull --build-arg branch=$CI_COMMIT_BRANCH --file .ci/rockylinux8.Dockerfile -t $CI_REGISTRY/$CI_PROJECT_NAMESPACE/vrtgen/rocky-builder8:latest .
      - docker push $CI_REGISTRY/$CI_PROJECT_NAMESPACE/vrtgen/rocky-builder8:latest

build:rockylinux:9:
    image: docker:latest
    stage: build
    interruptible: true
    tags:
      - Docker
    before_script:
      - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    script:
      - docker build --pull --build-arg branch=$CI_COMMIT_BRANCH --file .ci/rockylinux9.Dockerfile -t $CI_REGISTRY/$CI_PROJECT_NAMESPACE/vrtgen/rocky-builder9:latest .
      - docker push $CI_REGISTRY/$CI_PROJECT_NAMESPACE/vrtgen/rocky-builder9:latest

build:ubuntu:20.04:
    image: docker:latest
    stage: build
    interruptible: true
    tags:
      - Docker
    before_script:
      - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    script:
      - docker build --pull --build-arg branch=$CI_COMMIT_BRANCH --file .ci/ubuntu20.Dockerfile -t $CI_REGISTRY/$CI_PROJECT_NAMESPACE/vrtgen/ubuntu20-builder:latest .
      - docker push $CI_REGISTRY/$CI_PROJECT_NAMESPACE/vrtgen/ubuntu20-builder:latest

build:ubuntu:22.04:
    image: docker:latest
    stage: build
    interruptible: true
    tags:
      - Docker
    before_script:
      - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    script:
      - docker build --pull --build-arg branch=$CI_COMMIT_BRANCH --file .ci/ubuntu22.Dockerfile -t $CI_REGISTRY/$CI_PROJECT_NAMESPACE/vrtgen/ubuntu22-builder:latest .
      - docker push $CI_REGISTRY/$CI_PROJECT_NAMESPACE/vrtgen/ubuntu22-builder:latest

build:alpine:3.19:
    image: docker:latest
    stage: build
    interruptible: true
    tags:
      - Docker
    before_script:
      - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    script:
      - docker build --pull --build-arg branch=$CI_COMMIT_BRANCH --file .ci/alpine3.19.Dockerfile -t $CI_REGISTRY/$CI_PROJECT_NAMESPACE/vrtgen/alpine3.19-builder:latest .
      - docker push $CI_REGISTRY/$CI_PROJECT_NAMESPACE/vrtgen/alpine3.19-builder:latest

# Rockylinux 8 Testing
lint:rockylinux:8:
    image: $CI_REGISTRY/$CI_PROJECT_NAMESPACE/vrtgen/rocky-builder8:latest
    stage: test
    needs: ["build:rockylinux:8"]
    interruptible: true
    tags:
      - Docker
    script:
      # Tell Pylint not to exit with a non-zero status for GitLab's benefit.
      # Unfortunately, even if the command completely fails (e.g., invalid
      # path) it still exits with 0.
      - pylint -f colorized --exit-zero src/

test:rockylinux:8:
    image: $CI_REGISTRY/$CI_PROJECT_NAMESPACE/vrtgen/rocky-builder8:latest
    stage: test
    needs: ["build:rockylinux:8"]
    interruptible: true
    tags:
      - Docker
    script:
      - pytest --color=yes --junit-xml=vrtgen-pytests.xml
    artifacts:
      paths:
        - vrtgen-pytests.xml
      reports:
        junit: vrtgen-pytests.xml

test:cpp:rockylinux:8:
    image: $CI_REGISTRY/$CI_PROJECT_NAMESPACE/vrtgen/rocky-builder8:latest
    stage: test
    needs: ["build:rockylinux:8"]
    interruptible: true
    tags:
      - Docker
    variables:
      # Don't need to clone the repo because we're using the Docker image's copy
      GIT_STRATEGY: none
    script:
      - cd /root/vrtgen
      - make -C build check
    artifacts:
      paths:
        - build/*-results.xml
      reports:
        junit: build/*-results.xml

# Rocky 9 Testing
lint:rockylinux:9:
    image: $CI_REGISTRY/$CI_PROJECT_NAMESPACE/vrtgen/rocky-builder9:latest
    stage: test
    needs: ["build:rockylinux:9"]
    interruptible: true
    tags:
      - Docker
    script:
      # Tell Pylint not to exit with a non-zero status for GitLab's benefit.
      # Unfortunately, even if the command completely fails (e.g., invalid
      # path) it still exits with 0.
      - pylint -f colorized --exit-zero src/

test:rockylinux:9:
    image: $CI_REGISTRY/$CI_PROJECT_NAMESPACE/vrtgen/rocky-builder9:latest
    stage: test
    needs: ["build:rockylinux:9"]
    interruptible: true
    tags:
      - Docker
    script:
      - pytest --color=yes --junit-xml=vrtgen-pytests.xml
    artifacts:
      paths:
        - vrtgen-pytests.xml
      reports:
        junit: vrtgen-pytests.xml

test:cpp:rockylinux:9:
    image: $CI_REGISTRY/$CI_PROJECT_NAMESPACE/vrtgen/rocky-builder9:latest
    stage: test
    needs: ["build:rockylinux:9"]
    interruptible: true
    tags:
      - Docker
    variables:
      # Don't need to clone the repo because we're using the Docker image's copy
      GIT_STRATEGY: none
    script:
      - cd /root/vrtgen
      - make -C build check
    artifacts:
      paths:
        - build/*-results.xml
      reports:
        junit: build/*-results.xml

# Ubuntu 20.04 Testing
lint:ubuntu:20.04:
    image: $CI_REGISTRY/$CI_PROJECT_NAMESPACE/vrtgen/ubuntu20-builder:latest
    stage: test
    needs: ["build:ubuntu:20.04"]
    interruptible: true
    tags:
      - Docker
    script:
      # Tell Pylint not to exit with a non-zero status for GitLab's benefit.
      # Unfortunately, even if the command completely fails (e.g., invalid
      # path) it still exits with 0.
      - pylint -f colorized --exit-zero src/

test:ubuntu:20.04:
    image: $CI_REGISTRY/$CI_PROJECT_NAMESPACE/vrtgen/ubuntu20-builder:latest
    stage: test
    needs: ["build:ubuntu:20.04"]
    interruptible: true
    tags:
      - Docker
    script:
      - pytest --color=yes --junit-xml=vrtgen-pytests.xml
    artifacts:
      paths:
        - vrtgen-pytests.xml
      reports:
        junit: vrtgen-pytests.xml

test:cpp:ubuntu:20.04:
    image: $CI_REGISTRY/$CI_PROJECT_NAMESPACE/vrtgen/ubuntu20-builder:latest
    stage: test
    needs: ["build:ubuntu:20.04"]
    interruptible: true
    tags:
      - Docker
    variables:
      # Don't need to clone the repo because we're using the Docker image's copy
      GIT_STRATEGY: none
    script:
      - cd /root/vrtgen
      - make -C build check
    artifacts:
      paths:
        - build/*-results.xml
      reports:
        junit: build/*-results.xml

# Ubuntu 22.04 Testing
lint:ubuntu:22.04:
    image: $CI_REGISTRY/$CI_PROJECT_NAMESPACE/vrtgen/ubuntu22-builder:latest
    stage: test
    needs: ["build:ubuntu:22.04"]
    interruptible: true
    tags:
      - Docker
    script:
      # Tell Pylint not to exit with a non-zero status for GitLab's benefit.
      # Unfortunately, even if the command completely fails (e.g., invalid
      # path) it still exits with 0.
      - pylint -f colorized --exit-zero src/

test:ubuntu:22.04:
    image: $CI_REGISTRY/$CI_PROJECT_NAMESPACE/vrtgen/ubuntu22-builder:latest
    stage: test
    needs: ["build:ubuntu:22.04"]
    interruptible: true
    tags:
      - Docker
    script:
      - pytest --color=yes --junit-xml=vrtgen-pytests.xml
    artifacts:
      paths:
        - vrtgen-pytests.xml
      reports:
        junit: vrtgen-pytests.xml

test:cpp:ubuntu:22.04:
    image: $CI_REGISTRY/$CI_PROJECT_NAMESPACE/vrtgen/ubuntu22-builder:latest
    stage: test
    needs: ["build:ubuntu:22.04"]
    interruptible: true
    tags:
      - Docker
    variables:
      # Don't need to clone the repo because we're using the Docker image's copy
      GIT_STRATEGY: none
    script:
      - cd /root/vrtgen
      - make -C build check
    artifacts:
      paths:
        - build/*-results.xml
      reports:
        junit: build/*-results.xml

# Alpine 3.19 Testing
lint:alpine:3.19:
    image: $CI_REGISTRY/$CI_PROJECT_NAMESPACE/vrtgen/alpine3.19-builder:latest
    stage: test
    needs: ["build:alpine:3.19"]
    interruptible: true
    tags:
      - Docker
    script:
      - . /opt/venv/bin/activate
      # Tell Pylint not to exit with a non-zero status for GitLab's benefit.
      # Unfortunately, even if the command completely fails (e.g., invalid
      # path) it still exits with 0.
      - pylint -f colorized --exit-zero src/

test:alpine:3.19:
    image: $CI_REGISTRY/$CI_PROJECT_NAMESPACE/vrtgen/alpine3.19-builder:latest
    stage: test
    needs: ["build:alpine:3.19"]
    interruptible: true
    tags:
      - Docker
    script:
      - . /opt/venv/bin/activate
      - pytest --color=yes --junit-xml=vrtgen-pytests.xml
    artifacts:
      paths:
        - vrtgen-pytests.xml
      reports:
        junit: vrtgen-pytests.xml

test:cpp:alpine:3.19:
    image: $CI_REGISTRY/$CI_PROJECT_NAMESPACE/vrtgen/alpine3.19-builder:latest
    stage: test
    needs: ["build:alpine:3.19"]
    interruptible: true
    tags:
      - Docker
    variables:
      # Don't need to clone the repo because we're using the Docker image's copy
      GIT_STRATEGY: none
    script:
      - . /opt/venv/bin/activate
      - cd /root/vrtgen
      - make -C build check
    artifacts:
      paths:
        - build/*-results.xml
      reports:
        junit: build/*-results.xml
