variables:
    IMAGE_TAG: $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA

stages:
    - build
    - test
    - package

# Build Stage Jobs
build:centos:7:
    image: docker:19.03.8
    stage: build
    tags:
        - Docker
    variables:
        CENTOS_TAG: ${IMAGE_TAG}_centos
    before_script:
      - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    script:
      - docker build --pull --build-arg branch=$CI_COMMIT_BRANCH -t ${CENTOS_TAG} --file testing/centos.Dockerfile .
      - docker push ${CENTOS_TAG}

build:rockylinux:8:
    image: docker:19.03.8
    stage: build
    tags:
        - Docker
    variables:
        ROCKY_TAG: ${IMAGE_TAG}_rockylinux
    before_script:
      - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    script:
      - docker build --pull --build-arg branch=$CI_COMMIT_BRANCH -t ${ROCKY_TAG} --file testing/rockylinux.Dockerfile .
      - docker push ${ROCKY_TAG}

build:ubuntu:18.04:
    image: docker:19.03.8
    stage: build
    tags:
        - Docker
    variables:
        UBUNTU_TAG: ${IMAGE_TAG}_ubuntu18
    before_script:
      - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    script:
      - docker build --pull --build-arg branch=$CI_COMMIT_BRANCH -t ${UBUNTU_TAG} --file testing/ubuntu18.Dockerfile .
      - docker push ${UBUNTU_TAG}

build:ubuntu:20.04:
    image: docker:19.03.8
    stage: build
    tags:
        - Docker
    variables:
        UBUNTU_TAG: ${IMAGE_TAG}_ubuntu20
    before_script:
      - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    script:
      - docker build --pull --build-arg branch=$CI_COMMIT_BRANCH -t ${UBUNTU_TAG} --file testing/ubuntu20.Dockerfile .
      - docker push ${UBUNTU_TAG}

# Centos 7 Testing
lint:centos:7:
    image: ${IMAGE_TAG}_centos
    stage: test
    script:
        # Enable updated packages
        # Note: scl enable failing in ci, manually modifying $PATH
        # - scl enable devtoolset-10 /bin/bash
        # - scl enable rh-python38 /bin/bash
        # Tell Pylint not to exit with a non-zero status for GitLab's benefit.
        # Unfortunately, even if the command completely fails (e.g., invalid
        # path) it still exits with 0.
        - pylint -f colorized --exit-zero src/

test:centos:7:
    image: ${IMAGE_TAG}_centos
    stage: test
    script:
        - pytest --color=yes --junit-xml=vrtgen-pytests.xml
    artifacts:
        paths:
            - vrtgen-pytests.xml
        reports:
            junit: vrtgen-pytests.xml

test:cpp:centos:7:
    image: ${IMAGE_TAG}_centos
    stage: test
    variables:
        # Don't need to clone the repo because we're using the Docker image's copy
        GIT_STRATEGY: none
    script:
        - cd /root/vrtgen
        - make -C build check
    artifacts:
        paths:
            - build/*-results.xml
        reports:
            junit: build/*-results.xml

# Centos 8 Testing
lint:rockylinux:8:
    image: ${IMAGE_TAG}_rockylinux
    stage: test
    script:
        # Tell Pylint not to exit with a non-zero status for GitLab's benefit.
        # Unfortunately, even if the command completely fails (e.g., invalid
        # path) it still exits with 0.
        - pylint -f colorized --exit-zero src/

test:rockylinux:8:
    image: ${IMAGE_TAG}_rockylinux
    stage: test
    script:
        - pytest --color=yes --junit-xml=vrtgen-pytests.xml
    artifacts:
        paths:
            - vrtgen-pytests.xml
        reports:
            junit: vrtgen-pytests.xml

test:cpp:rockylinux:8:
    image: ${IMAGE_TAG}_rockylinux
    stage: test
    variables:
        # Don't need to clone the repo because we're using the Docker image's copy
        GIT_STRATEGY: none
    script:
        - cd /root/vrtgen
        - make -C build check
    artifacts:
        paths:
            - build/*-results.xml
        reports:
            junit: build/*-results.xml

# Ubuntu 18.04 Testing
lint:ubuntu:18.04:
    image: ${IMAGE_TAG}_ubuntu18
    stage: test
    script:
        # Tell Pylint not to exit with a non-zero status for GitLab's benefit.
        # Unfortunately, even if the command completely fails (e.g., invalid
        # path) it still exits with 0.
        - pylint -f colorized --exit-zero src/

test:ubuntu:18.04:
    image: ${IMAGE_TAG}_ubuntu18
    stage: test
    script:
        - pytest --color=yes --junit-xml=vrtgen-pytests.xml
    artifacts:
        paths:
            - vrtgen-pytests.xml
        reports:
            junit: vrtgen-pytests.xml

test:cpp:ubuntu:18.04:
    image: ${IMAGE_TAG}_ubuntu18
    stage: test
    variables:
        # Don't need to clone the repo because we're using the Docker image's copy
        GIT_STRATEGY: none
    script:
        - cd /root/vrtgen
        - make -C build check
    artifacts:
        paths:
            - build/*-results.xml
        reports:
            junit: build/*-results.xml

# Ubuntu 20.04 Testing
lint:ubuntu:20.04:
    image: ${IMAGE_TAG}_ubuntu20
    stage: test
    script:
        # Tell Pylint not to exit with a non-zero status for GitLab's benefit.
        # Unfortunately, even if the command completely fails (e.g., invalid
        # path) it still exits with 0.
        - pylint -f colorized --exit-zero src/

test:ubuntu:20.04:
    image: ${IMAGE_TAG}_ubuntu20
    stage: test
    script:
        - pytest --color=yes --junit-xml=vrtgen-pytests.xml
    artifacts:
        paths:
            - vrtgen-pytests.xml
        reports:
            junit: vrtgen-pytests.xml

test:cpp:ubuntu:20.04:
    image: ${IMAGE_TAG}_ubuntu20
    stage: test
    variables:
        # Don't need to clone the repo because we're using the Docker image's copy
        GIT_STRATEGY: none
    script:
        - cd /root/vrtgen
        - make -C build check
    artifacts:
        paths:
            - build/*-results.xml
        reports:
            junit: build/*-results.xml

# Build release RPMs/debs
rpmbuild:centos:7:
    stage: package
    image: ${IMAGE_TAG}_centos
    # dependencies:
    #     - build:centos:7
    # needs: [
    #     "build:centos:7",
    #     "lint:centos:7",
    #     "test:centos:7",
    #     "test:cpp:centos:7"
    # ]
    script:
        - yum install -y rpm-build
        - python3.7 setup.py bdist_rpm --requires="python3-PyYAML python3-jinja2"
        # C++ library packaging (requires installing Python RPMs)
        - yum install -y dist/vrtgen-*.noarch.rpm
        - cmake3 -B release
        - cd release
        - cpack3 -G RPM
        - mv *.rpm ../dist
    artifacts:
        paths:
            - dist/*.rpm
    only:
        - tags

rpmbuild:rockylinux:8:
    stage: package
    image: ${IMAGE_TAG}_rockylinux
    # dependencies:
    #     - build:rockylinux:8
    # needs: [
    #     "build:rockylinux:8",
    #     "lint:rockylinux:8",
    #     "test:rockylinux:8",
    #     "test:cpp:rockylinux:8"
    # ]
    script:
        - yum install -y rpm-build
        - python3 setup.py bdist_rpm --requires="python3-pyyaml python3-jinja2"
        # C++ library packaging (requires installing Python RPMs)
        - yum install -y dist/vrtgen-*.noarch.rpm
        - cmake -B release
        - cd release
        - cpack -G RPM
        - mv *.rpm ../dist
    artifacts:
        paths:
            - dist/*.rpm
    only:
        - tags

debbuild:ubuntu:18.04:
    stage: package
    image: ${IMAGE_TAG}_ubuntu18
    # dependencies:
    #     - build:ubuntu:18.04
    # needs: [
    #     "build:ubuntu:18.04",
    #     "lint:ubuntu:18.04",
    #     "test:ubuntu:18.04",
    #     "test:cpp:ubuntu:18.04"
    # ]
    script:
        - apt install -y python3-stdeb fakeroot python-all dh-python
        - python3 setup.py --command-packages=stdeb.command bdist_deb
        # C++ library packaging (requires installing Python RPMs)
        - apt install -y ./deb_dist/*.deb
        - cmake -B release
        - cd release
        - cpack -G DEB
        - mv *.deb ../deb_dist
    artifacts:
        paths:
            - deb_dist/*.deb
    only:
        - tags
       
debbuild:ubuntu:20.04:
    stage: package
    image: ${IMAGE_TAG}_ubuntu20
    # dependencies:
    #     - build:ubuntu:20.04
    # needs: [
    #     "build:ubuntu:20.04",
    #     "lint:ubuntu:20.04",
    #     "test:ubuntu:20.04",
    #     "test:cpp:ubuntu:20.04"
    # ]
    script:
        - apt install -y python3-stdeb fakeroot python-all dh-python
        - python3 setup.py --command-packages=stdeb.command bdist_deb
        # C++ library packaging (requires installing Python RPMs)
        - apt install -y ./deb_dist/*.deb
        - cmake -B release
        - cd release
        - cpack -G DEB
        - mv *.deb ../deb_dist
    artifacts:
        paths:
            - deb_dist/*.deb
    only:
        - tags
