variables:
    IMAGE_TAG: $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA

stages:
    - build
    - test
    - package

# Build Stage Jobs
build:centos:7:
    image: docker:19.03.8
    stage: build
    tags:
        - Docker
    before_script:
      - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    script:
      - docker build --pull --build-arg branch=$CI_COMMIT_BRANCH --file testing/centos.Dockerfile -t $CI_REGISTRY/geon/vita49/vrtgen/centos-builder:latest .
      - docker push $CI_REGISTRY/geon/vita49/vrtgen/centos-builder:latest

build:rockylinux:8:
    image: docker:19.03.8
    stage: build
    tags:
        - Docker
    before_script:
      - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    script:
      - docker build --pull --build-arg branch=$CI_COMMIT_BRANCH --file testing/rockylinux.Dockerfile -t $CI_REGISTRY/geon/vita49/vrtgen/rocky-builder:latest .
      - docker push $CI_REGISTRY/geon/vita49/vrtgen/rocky-builder:latest

build:ubuntu:16.04:
    image: docker:19.03.8
    stage: build
    tags:
        - Docker
    before_script:
      - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    script:
      - docker build --pull --build-arg branch=$CI_COMMIT_BRANCH --file testing/ubuntu16.Dockerfile -t $CI_REGISTRY/geon/vita49/vrtgen/ubuntu16-builder:latest .
      - docker push $CI_REGISTRY/geon/vita49/vrtgen/ubuntu16-builder:latest

build:ubuntu:18.04:
    image: docker:19.03.8
    stage: build
    tags:
        - Docker
    before_script:
      - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    script:
      - docker build --pull --build-arg branch=$CI_COMMIT_BRANCH --file testing/ubuntu18.Dockerfile -t $CI_REGISTRY/geon/vita49/vrtgen/ubuntu18-builder:latest .
      - docker push $CI_REGISTRY/geon/vita49/vrtgen/ubuntu18-builder:latest

build:ubuntu:20.04:
    image: docker:19.03.8
    stage: build
    tags:
        - Docker
    before_script:
      - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    script:
      - docker build --pull --build-arg branch=$CI_COMMIT_BRANCH --file testing/ubuntu20.Dockerfile -t $CI_REGISTRY/geon/vita49/vrtgen/ubuntu20-builder:latest .
      - docker push $CI_REGISTRY/geon/vita49/vrtgen/ubuntu20-builder:latest

# Centos 7 Testing
lint:centos:7:
    image: $CI_REGISTRY/geon/vita49/vrtgen/centos-builder:latest
    stage: test
    needs: ["build:centos:7"]
    script:
        # Enable updated packages
        # Note: scl enable failing in ci, manually modifying $PATH
        # - scl enable devtoolset-10 /bin/bash
        # - scl enable rh-python38 /bin/bash
        # Tell Pylint not to exit with a non-zero status for GitLab's benefit.
        # Unfortunately, even if the command completely fails (e.g., invalid
        # path) it still exits with 0.
        - pylint -f colorized --exit-zero src/

test:centos:7:
    image: $CI_REGISTRY/geon/vita49/vrtgen/centos-builder:latest
    stage: test
    needs: ["build:centos:7"]
    script:
        - pytest --color=yes --junit-xml=vrtgen-pytests.xml
    artifacts:
        paths:
            - vrtgen-pytests.xml
        reports:
            junit: vrtgen-pytests.xml

test:cpp:centos:7:
    image: $CI_REGISTRY/geon/vita49/vrtgen/centos-builder:latest
    stage: test
    needs: ["build:centos:7"]
    variables:
        # Don't need to clone the repo because we're using the Docker image's copy
        GIT_STRATEGY: none
    script:
        - cd /root/vrtgen
        - make -C build check
    artifacts:
        paths:
            - build/*-results.xml
        reports:
            junit: build/*-results.xml

# Centos 8 Testing
lint:rockylinux:8:
    image: $CI_REGISTRY/geon/vita49/vrtgen/rocky-builder:latest
    stage: test
    needs: ["build:rockylinux:8"]
    script:
        # Tell Pylint not to exit with a non-zero status for GitLab's benefit.
        # Unfortunately, even if the command completely fails (e.g., invalid
        # path) it still exits with 0.
        - pylint -f colorized --exit-zero src/

test:rockylinux:8:
    image: $CI_REGISTRY/geon/vita49/vrtgen/rocky-builder:latest
    stage: test
    needs: ["build:rockylinux:8"]
    script:
        - pytest --color=yes --junit-xml=vrtgen-pytests.xml
    artifacts:
        paths:
            - vrtgen-pytests.xml
        reports:
            junit: vrtgen-pytests.xml

test:cpp:rockylinux:8:
    image: $CI_REGISTRY/geon/vita49/vrtgen/rocky-builder:latest
    stage: test
    needs: ["build:rockylinux:8"]
    variables:
        # Don't need to clone the repo because we're using the Docker image's copy
        GIT_STRATEGY: none
    script:
        - cd /root/vrtgen
        - make -C build check
    artifacts:
        paths:
            - build/*-results.xml
        reports:
            junit: build/*-results.xml

# Ubuntu 18.04 Testing
lint:ubuntu:18.04:
    image: $CI_REGISTRY/geon/vita49/vrtgen/ubuntu18-builder:latest
    stage: test
    needs: ["build:ubuntu:18.04"]
    script:
        # Tell Pylint not to exit with a non-zero status for GitLab's benefit.
        # Unfortunately, even if the command completely fails (e.g., invalid
        # path) it still exits with 0.
        - pylint -f colorized --exit-zero src/

test:ubuntu:18.04:
    image: $CI_REGISTRY/geon/vita49/vrtgen/ubuntu18-builder:latest
    stage: test
    needs: ["build:ubuntu:18.04"]
    script:
        - pytest --color=yes --junit-xml=vrtgen-pytests.xml
    artifacts:
        paths:
            - vrtgen-pytests.xml
        reports:
            junit: vrtgen-pytests.xml

test:cpp:ubuntu:18.04:
    image: $CI_REGISTRY/geon/vita49/vrtgen/ubuntu18-builder:latest
    stage: test
    needs: ["build:ubuntu:18.04"]
    variables:
        # Don't need to clone the repo because we're using the Docker image's copy
        GIT_STRATEGY: none
    script:
        - cd /root/vrtgen
        - make -C build check
    artifacts:
        paths:
            - build/*-results.xml
        reports:
            junit: build/*-results.xml

# Ubuntu 18.04 Testing
lint:ubuntu:16.04:
    image: $CI_REGISTRY/geon/vita49/vrtgen/ubuntu16-builder:latest
    stage: test
    needs: ["build:ubuntu:16.04"]
    script:
        # Tell Pylint not to exit with a non-zero status for GitLab's benefit.
        # Unfortunately, even if the command completely fails (e.g., invalid
        # path) it still exits with 0.
        - pylint -f colorized --exit-zero src/

test:ubuntu:16.04:
    image: $CI_REGISTRY/geon/vita49/vrtgen/ubuntu16-builder:latest
    stage: test
    needs: ["build:ubuntu:16.04"]
    script:
        - pytest --color=yes --junit-xml=vrtgen-pytests.xml
    artifacts:
        paths:
            - vrtgen-pytests.xml
        reports:
            junit: vrtgen-pytests.xml

test:cpp:ubuntu:16.04:
    image: $CI_REGISTRY/geon/vita49/vrtgen/ubuntu16-builder:latest
    stage: test
    needs: ["build:ubuntu:16.04"]
    variables:
        # Don't need to clone the repo because we're using the Docker image's copy
        GIT_STRATEGY: none
    script:
        - cd /root/vrtgen
        - make -C build check
    artifacts:
        paths:
            - build/*-results.xml
        reports:
            junit: build/*-results.xml

# Ubuntu 20.04 Testing
lint:ubuntu:20.04:
    image: $CI_REGISTRY/geon/vita49/vrtgen/ubuntu20-builder:latest
    stage: test
    needs: ["build:ubuntu:20.04"]
    script:
        # Tell Pylint not to exit with a non-zero status for GitLab's benefit.
        # Unfortunately, even if the command completely fails (e.g., invalid
        # path) it still exits with 0.
        - pylint -f colorized --exit-zero src/

test:ubuntu:20.04:
    image: $CI_REGISTRY/geon/vita49/vrtgen/ubuntu20-builder:latest
    stage: test
    needs: ["build:ubuntu:20.04"]
    script:
        - pytest --color=yes --junit-xml=vrtgen-pytests.xml
    artifacts:
        paths:
            - vrtgen-pytests.xml
        reports:
            junit: vrtgen-pytests.xml

test:cpp:ubuntu:20.04:
    image: $CI_REGISTRY/geon/vita49/vrtgen/ubuntu20-builder:latest
    stage: test
    needs: ["build:ubuntu:20.04"]
    variables:
        # Don't need to clone the repo because we're using the Docker image's copy
        GIT_STRATEGY: none
    script:
        - cd /root/vrtgen
        - make -C build check
    artifacts:
        paths:
            - build/*-results.xml
        reports:
            junit: build/*-results.xml

# Build release RPMs/debs
rpmbuild:centos:7:
    stage: package
    image: $CI_REGISTRY/geon/vita49/vrtgen/centos-builder:latest
    needs: [
        "build:centos:7",
        "lint:centos:7",
        "test:centos:7",
        "test:cpp:centos:7"
    ]
    script:
        - yum install -y rpm-build
        - python3.7 setup.py bdist_rpm --requires="python3-PyYAML python3-jinja2"
        # C++ library packaging (requires installing Python RPMs)
        - yum install -y dist/vrtgen-*.noarch.rpm
        - cmake3 -B release
        - cd release
        - cpack3 -G RPM
        - mv *.rpm ../dist
    artifacts:
        paths:
            - dist/*.rpm
    only:
        - tags

rpmbuild:rockylinux:8:
    stage: package
    image: $CI_REGISTRY/geon/vita49/vrtgen/rocky-builder:latest
    needs: [
        "build:rockylinux:8",
        "lint:rockylinux:8",
        "test:rockylinux:8",
        "test:cpp:rockylinux:8"
    ]
    script:
        - yum install -y rpm-build
        - python3 setup.py bdist_rpm --requires="python3-pyyaml python3-jinja2"
        # C++ library packaging (requires installing Python RPMs)
        - yum install -y dist/vrtgen-*.noarch.rpm
        - cmake -B release
        - cd release
        - cpack -G RPM
        - mv *.rpm ../dist
    artifacts:
        paths:
            - dist/*.rpm
    only:
        - tags

debbuild:ubuntu:16.04:
    stage: package
    image: $CI_REGISTRY/geon/vita49/vrtgen/ubuntu16-builder:latest
    needs: [
        "build:ubuntu:16.04",
        "lint:ubuntu:16.04",
        "test:ubuntu:16.04",
        "test:cpp:ubuntu:16.04"
    ]
    script:
        - apt install -y python3-stdeb fakeroot python-all dh-python
        - python3 setup.py --command-packages=stdeb.command bdist_deb
        # C++ library packaging (requires installing Python RPMs)
        - apt install -y ./deb_dist/*.deb
        - cmake -B release
        - cd release
        - cpack -G DEB
        - mv *.deb ../deb_dist
    artifacts:
        paths:
            - deb_dist/*.deb
    only:
        - tags

debbuild:ubuntu:18.04:
    stage: package
    image: $CI_REGISTRY/geon/vita49/vrtgen/ubuntu18-builder:latest
    needs: [
        "build:ubuntu:18.04",
        "lint:ubuntu:18.04",
        "test:ubuntu:18.04",
        "test:cpp:ubuntu:18.04"
    ]
    script:
        - apt install -y python3-stdeb fakeroot python-all dh-python
        - python3 setup.py --command-packages=stdeb.command bdist_deb
        # C++ library packaging (requires installing Python RPMs)
        - apt install -y ./deb_dist/*.deb
        - cmake -B release
        - cd release
        - cpack -G DEB
        - mv *.deb ../deb_dist
    artifacts:
        paths:
            - deb_dist/*.deb
    only:
        - tags
       
debbuild:ubuntu:20.04:
    stage: package
    image: $CI_REGISTRY/geon/vita49/vrtgen/ubuntu20-builder:latest
    needs: [
        "build:ubuntu:20.04",
        "lint:ubuntu:20.04",
        "test:ubuntu:20.04",
        "test:cpp:ubuntu:20.04"
    ]
    script:
        - apt install -y python3-stdeb fakeroot python-all dh-python
        - python3 setup.py --command-packages=stdeb.command bdist_deb
        # C++ library packaging (requires installing Python RPMs)
        - apt install -y ./deb_dist/*.deb
        - cmake -B release
        - cd release
        - cpack -G DEB
        - mv *.deb ../deb_dist
    artifacts:
        paths:
            - deb_dist/*.deb
    only:
        - tags
